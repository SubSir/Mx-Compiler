# Generated from Mx_parser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        70,
        388,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        1,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        54,
        8,
        0,
        10,
        0,
        12,
        0,
        57,
        9,
        0,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        65,
        8,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        5,
        2,
        74,
        8,
        2,
        10,
        2,
        12,
        2,
        77,
        9,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        88,
        8,
        4,
        10,
        4,
        12,
        4,
        91,
        9,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        5,
        4,
        99,
        8,
        4,
        10,
        4,
        12,
        4,
        102,
        9,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        106,
        8,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        111,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        117,
        8,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        3,
        6,
        122,
        8,
        6,
        1,
        7,
        1,
        7,
        5,
        7,
        126,
        8,
        7,
        10,
        7,
        12,
        7,
        129,
        9,
        7,
        1,
        7,
        1,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        144,
        8,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        160,
        8,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        171,
        8,
        8,
        10,
        8,
        12,
        8,
        174,
        9,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        1,
        8,
        3,
        8,
        181,
        8,
        8,
        1,
        9,
        3,
        9,
        184,
        8,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        188,
        8,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        192,
        8,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        198,
        8,
        10,
        10,
        10,
        12,
        10,
        201,
        9,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        218,
        8,
        10,
        10,
        10,
        12,
        10,
        221,
        9,
        10,
        3,
        10,
        223,
        8,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        235,
        8,
        10,
        10,
        10,
        12,
        10,
        238,
        9,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        242,
        8,
        10,
        1,
        10,
        4,
        10,
        245,
        8,
        10,
        11,
        10,
        12,
        10,
        246,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        254,
        8,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        285,
        8,
        10,
        10,
        10,
        12,
        10,
        288,
        9,
        10,
        3,
        10,
        290,
        8,
        10,
        1,
        10,
        3,
        10,
        293,
        8,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        1,
        10,
        5,
        10,
        300,
        8,
        10,
        10,
        10,
        12,
        10,
        303,
        9,
        10,
        1,
        10,
        1,
        10,
        3,
        10,
        307,
        8,
        10,
        1,
        10,
        4,
        10,
        310,
        8,
        10,
        11,
        10,
        12,
        10,
        311,
        5,
        10,
        314,
        8,
        10,
        10,
        10,
        12,
        10,
        317,
        9,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        5,
        16,
        334,
        8,
        16,
        10,
        16,
        12,
        16,
        337,
        9,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        3,
        17,
        345,
        8,
        17,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        4,
        19,
        352,
        8,
        19,
        11,
        19,
        12,
        19,
        353,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        3,
        21,
        363,
        8,
        21,
        1,
        22,
        1,
        22,
        3,
        22,
        367,
        8,
        22,
        1,
        22,
        1,
        22,
        3,
        22,
        371,
        8,
        22,
        5,
        22,
        373,
        8,
        22,
        10,
        22,
        12,
        22,
        376,
        9,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        3,
        24,
        386,
        8,
        24,
        1,
        24,
        0,
        1,
        20,
        25,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        0,
        6,
        1,
        0,
        27,
        28,
        2,
        0,
        8,
        8,
        29,
        38,
        2,
        0,
        22,
        22,
        39,
        47,
        1,
        0,
        48,
        53,
        2,
        0,
        54,
        56,
        64,
        64,
        2,
        0,
        54,
        57,
        64,
        64,
        433,
        0,
        55,
        1,
        0,
        0,
        0,
        2,
        60,
        1,
        0,
        0,
        0,
        4,
        69,
        1,
        0,
        0,
        0,
        6,
        81,
        1,
        0,
        0,
        0,
        8,
        105,
        1,
        0,
        0,
        0,
        10,
        107,
        1,
        0,
        0,
        0,
        12,
        121,
        1,
        0,
        0,
        0,
        14,
        123,
        1,
        0,
        0,
        0,
        16,
        180,
        1,
        0,
        0,
        0,
        18,
        183,
        1,
        0,
        0,
        0,
        20,
        253,
        1,
        0,
        0,
        0,
        22,
        318,
        1,
        0,
        0,
        0,
        24,
        322,
        1,
        0,
        0,
        0,
        26,
        324,
        1,
        0,
        0,
        0,
        28,
        326,
        1,
        0,
        0,
        0,
        30,
        328,
        1,
        0,
        0,
        0,
        32,
        330,
        1,
        0,
        0,
        0,
        34,
        344,
        1,
        0,
        0,
        0,
        36,
        346,
        1,
        0,
        0,
        0,
        38,
        348,
        1,
        0,
        0,
        0,
        40,
        355,
        1,
        0,
        0,
        0,
        42,
        362,
        1,
        0,
        0,
        0,
        44,
        364,
        1,
        0,
        0,
        0,
        46,
        379,
        1,
        0,
        0,
        0,
        48,
        385,
        1,
        0,
        0,
        0,
        50,
        54,
        3,
        2,
        1,
        0,
        51,
        54,
        3,
        4,
        2,
        0,
        52,
        54,
        3,
        6,
        3,
        0,
        53,
        50,
        1,
        0,
        0,
        0,
        53,
        51,
        1,
        0,
        0,
        0,
        53,
        52,
        1,
        0,
        0,
        0,
        54,
        57,
        1,
        0,
        0,
        0,
        55,
        53,
        1,
        0,
        0,
        0,
        55,
        56,
        1,
        0,
        0,
        0,
        56,
        58,
        1,
        0,
        0,
        0,
        57,
        55,
        1,
        0,
        0,
        0,
        58,
        59,
        5,
        0,
        0,
        1,
        59,
        1,
        1,
        0,
        0,
        0,
        60,
        61,
        3,
        40,
        20,
        0,
        61,
        62,
        5,
        64,
        0,
        0,
        62,
        64,
        5,
        1,
        0,
        0,
        63,
        65,
        3,
        32,
        16,
        0,
        64,
        63,
        1,
        0,
        0,
        0,
        64,
        65,
        1,
        0,
        0,
        0,
        65,
        66,
        1,
        0,
        0,
        0,
        66,
        67,
        5,
        2,
        0,
        0,
        67,
        68,
        3,
        14,
        7,
        0,
        68,
        3,
        1,
        0,
        0,
        0,
        69,
        70,
        5,
        3,
        0,
        0,
        70,
        71,
        5,
        64,
        0,
        0,
        71,
        75,
        5,
        4,
        0,
        0,
        72,
        74,
        3,
        12,
        6,
        0,
        73,
        72,
        1,
        0,
        0,
        0,
        74,
        77,
        1,
        0,
        0,
        0,
        75,
        73,
        1,
        0,
        0,
        0,
        75,
        76,
        1,
        0,
        0,
        0,
        76,
        78,
        1,
        0,
        0,
        0,
        77,
        75,
        1,
        0,
        0,
        0,
        78,
        79,
        5,
        5,
        0,
        0,
        79,
        80,
        5,
        6,
        0,
        0,
        80,
        5,
        1,
        0,
        0,
        0,
        81,
        82,
        3,
        8,
        4,
        0,
        82,
        7,
        1,
        0,
        0,
        0,
        83,
        84,
        3,
        36,
        18,
        0,
        84,
        89,
        3,
        10,
        5,
        0,
        85,
        86,
        5,
        7,
        0,
        0,
        86,
        88,
        3,
        10,
        5,
        0,
        87,
        85,
        1,
        0,
        0,
        0,
        88,
        91,
        1,
        0,
        0,
        0,
        89,
        87,
        1,
        0,
        0,
        0,
        89,
        90,
        1,
        0,
        0,
        0,
        90,
        92,
        1,
        0,
        0,
        0,
        91,
        89,
        1,
        0,
        0,
        0,
        92,
        93,
        5,
        6,
        0,
        0,
        93,
        106,
        1,
        0,
        0,
        0,
        94,
        95,
        3,
        38,
        19,
        0,
        95,
        100,
        3,
        10,
        5,
        0,
        96,
        97,
        5,
        7,
        0,
        0,
        97,
        99,
        3,
        10,
        5,
        0,
        98,
        96,
        1,
        0,
        0,
        0,
        99,
        102,
        1,
        0,
        0,
        0,
        100,
        98,
        1,
        0,
        0,
        0,
        100,
        101,
        1,
        0,
        0,
        0,
        101,
        103,
        1,
        0,
        0,
        0,
        102,
        100,
        1,
        0,
        0,
        0,
        103,
        104,
        5,
        6,
        0,
        0,
        104,
        106,
        1,
        0,
        0,
        0,
        105,
        83,
        1,
        0,
        0,
        0,
        105,
        94,
        1,
        0,
        0,
        0,
        106,
        9,
        1,
        0,
        0,
        0,
        107,
        110,
        5,
        64,
        0,
        0,
        108,
        109,
        5,
        8,
        0,
        0,
        109,
        111,
        3,
        20,
        10,
        0,
        110,
        108,
        1,
        0,
        0,
        0,
        110,
        111,
        1,
        0,
        0,
        0,
        111,
        11,
        1,
        0,
        0,
        0,
        112,
        122,
        3,
        8,
        4,
        0,
        113,
        114,
        5,
        64,
        0,
        0,
        114,
        116,
        5,
        1,
        0,
        0,
        115,
        117,
        3,
        32,
        16,
        0,
        116,
        115,
        1,
        0,
        0,
        0,
        116,
        117,
        1,
        0,
        0,
        0,
        117,
        118,
        1,
        0,
        0,
        0,
        118,
        119,
        5,
        2,
        0,
        0,
        119,
        122,
        3,
        14,
        7,
        0,
        120,
        122,
        3,
        2,
        1,
        0,
        121,
        112,
        1,
        0,
        0,
        0,
        121,
        113,
        1,
        0,
        0,
        0,
        121,
        120,
        1,
        0,
        0,
        0,
        122,
        13,
        1,
        0,
        0,
        0,
        123,
        127,
        5,
        4,
        0,
        0,
        124,
        126,
        3,
        16,
        8,
        0,
        125,
        124,
        1,
        0,
        0,
        0,
        126,
        129,
        1,
        0,
        0,
        0,
        127,
        125,
        1,
        0,
        0,
        0,
        127,
        128,
        1,
        0,
        0,
        0,
        128,
        130,
        1,
        0,
        0,
        0,
        129,
        127,
        1,
        0,
        0,
        0,
        130,
        131,
        5,
        5,
        0,
        0,
        131,
        15,
        1,
        0,
        0,
        0,
        132,
        181,
        5,
        6,
        0,
        0,
        133,
        134,
        3,
        20,
        10,
        0,
        134,
        135,
        5,
        6,
        0,
        0,
        135,
        181,
        1,
        0,
        0,
        0,
        136,
        137,
        5,
        9,
        0,
        0,
        137,
        138,
        5,
        1,
        0,
        0,
        138,
        139,
        3,
        20,
        10,
        0,
        139,
        140,
        5,
        2,
        0,
        0,
        140,
        143,
        3,
        16,
        8,
        0,
        141,
        142,
        5,
        10,
        0,
        0,
        142,
        144,
        3,
        16,
        8,
        0,
        143,
        141,
        1,
        0,
        0,
        0,
        143,
        144,
        1,
        0,
        0,
        0,
        144,
        181,
        1,
        0,
        0,
        0,
        145,
        146,
        5,
        11,
        0,
        0,
        146,
        147,
        5,
        1,
        0,
        0,
        147,
        148,
        3,
        20,
        10,
        0,
        148,
        149,
        5,
        2,
        0,
        0,
        149,
        150,
        3,
        16,
        8,
        0,
        150,
        181,
        1,
        0,
        0,
        0,
        151,
        152,
        5,
        12,
        0,
        0,
        152,
        153,
        5,
        1,
        0,
        0,
        153,
        154,
        3,
        18,
        9,
        0,
        154,
        155,
        5,
        2,
        0,
        0,
        155,
        156,
        3,
        16,
        8,
        0,
        156,
        181,
        1,
        0,
        0,
        0,
        157,
        159,
        5,
        13,
        0,
        0,
        158,
        160,
        3,
        20,
        10,
        0,
        159,
        158,
        1,
        0,
        0,
        0,
        159,
        160,
        1,
        0,
        0,
        0,
        160,
        161,
        1,
        0,
        0,
        0,
        161,
        181,
        5,
        6,
        0,
        0,
        162,
        181,
        3,
        8,
        4,
        0,
        163,
        164,
        3,
        20,
        10,
        0,
        164,
        165,
        5,
        8,
        0,
        0,
        165,
        166,
        3,
        20,
        10,
        0,
        166,
        167,
        5,
        6,
        0,
        0,
        167,
        181,
        1,
        0,
        0,
        0,
        168,
        172,
        5,
        4,
        0,
        0,
        169,
        171,
        3,
        16,
        8,
        0,
        170,
        169,
        1,
        0,
        0,
        0,
        171,
        174,
        1,
        0,
        0,
        0,
        172,
        170,
        1,
        0,
        0,
        0,
        172,
        173,
        1,
        0,
        0,
        0,
        173,
        175,
        1,
        0,
        0,
        0,
        174,
        172,
        1,
        0,
        0,
        0,
        175,
        181,
        5,
        5,
        0,
        0,
        176,
        177,
        5,
        14,
        0,
        0,
        177,
        181,
        5,
        6,
        0,
        0,
        178,
        179,
        5,
        15,
        0,
        0,
        179,
        181,
        5,
        6,
        0,
        0,
        180,
        132,
        1,
        0,
        0,
        0,
        180,
        133,
        1,
        0,
        0,
        0,
        180,
        136,
        1,
        0,
        0,
        0,
        180,
        145,
        1,
        0,
        0,
        0,
        180,
        151,
        1,
        0,
        0,
        0,
        180,
        157,
        1,
        0,
        0,
        0,
        180,
        162,
        1,
        0,
        0,
        0,
        180,
        163,
        1,
        0,
        0,
        0,
        180,
        168,
        1,
        0,
        0,
        0,
        180,
        176,
        1,
        0,
        0,
        0,
        180,
        178,
        1,
        0,
        0,
        0,
        181,
        17,
        1,
        0,
        0,
        0,
        182,
        184,
        3,
        20,
        10,
        0,
        183,
        182,
        1,
        0,
        0,
        0,
        183,
        184,
        1,
        0,
        0,
        0,
        184,
        185,
        1,
        0,
        0,
        0,
        185,
        187,
        5,
        6,
        0,
        0,
        186,
        188,
        3,
        20,
        10,
        0,
        187,
        186,
        1,
        0,
        0,
        0,
        187,
        188,
        1,
        0,
        0,
        0,
        188,
        189,
        1,
        0,
        0,
        0,
        189,
        191,
        5,
        6,
        0,
        0,
        190,
        192,
        3,
        20,
        10,
        0,
        191,
        190,
        1,
        0,
        0,
        0,
        191,
        192,
        1,
        0,
        0,
        0,
        192,
        19,
        1,
        0,
        0,
        0,
        193,
        194,
        6,
        10,
        -1,
        0,
        194,
        199,
        3,
        22,
        11,
        0,
        195,
        196,
        5,
        7,
        0,
        0,
        196,
        198,
        3,
        22,
        11,
        0,
        197,
        195,
        1,
        0,
        0,
        0,
        198,
        201,
        1,
        0,
        0,
        0,
        199,
        197,
        1,
        0,
        0,
        0,
        199,
        200,
        1,
        0,
        0,
        0,
        200,
        254,
        1,
        0,
        0,
        0,
        201,
        199,
        1,
        0,
        0,
        0,
        202,
        203,
        5,
        18,
        0,
        0,
        203,
        254,
        3,
        20,
        10,
        15,
        204,
        205,
        5,
        19,
        0,
        0,
        205,
        254,
        3,
        20,
        10,
        13,
        206,
        207,
        5,
        20,
        0,
        0,
        207,
        254,
        3,
        20,
        10,
        11,
        208,
        209,
        5,
        21,
        0,
        0,
        209,
        254,
        3,
        20,
        10,
        10,
        210,
        211,
        5,
        22,
        0,
        0,
        211,
        254,
        3,
        20,
        10,
        9,
        212,
        213,
        5,
        64,
        0,
        0,
        213,
        222,
        5,
        1,
        0,
        0,
        214,
        219,
        3,
        20,
        10,
        0,
        215,
        216,
        5,
        7,
        0,
        0,
        216,
        218,
        3,
        20,
        10,
        0,
        217,
        215,
        1,
        0,
        0,
        0,
        218,
        221,
        1,
        0,
        0,
        0,
        219,
        217,
        1,
        0,
        0,
        0,
        219,
        220,
        1,
        0,
        0,
        0,
        220,
        223,
        1,
        0,
        0,
        0,
        221,
        219,
        1,
        0,
        0,
        0,
        222,
        214,
        1,
        0,
        0,
        0,
        222,
        223,
        1,
        0,
        0,
        0,
        223,
        224,
        1,
        0,
        0,
        0,
        224,
        254,
        5,
        2,
        0,
        0,
        225,
        254,
        3,
        42,
        21,
        0,
        226,
        227,
        5,
        24,
        0,
        0,
        227,
        254,
        3,
        36,
        18,
        0,
        228,
        229,
        5,
        24,
        0,
        0,
        229,
        236,
        3,
        36,
        18,
        0,
        230,
        231,
        5,
        25,
        0,
        0,
        231,
        232,
        3,
        20,
        10,
        0,
        232,
        233,
        5,
        26,
        0,
        0,
        233,
        235,
        1,
        0,
        0,
        0,
        234,
        230,
        1,
        0,
        0,
        0,
        235,
        238,
        1,
        0,
        0,
        0,
        236,
        234,
        1,
        0,
        0,
        0,
        236,
        237,
        1,
        0,
        0,
        0,
        237,
        244,
        1,
        0,
        0,
        0,
        238,
        236,
        1,
        0,
        0,
        0,
        239,
        241,
        5,
        25,
        0,
        0,
        240,
        242,
        3,
        20,
        10,
        0,
        241,
        240,
        1,
        0,
        0,
        0,
        241,
        242,
        1,
        0,
        0,
        0,
        242,
        243,
        1,
        0,
        0,
        0,
        243,
        245,
        5,
        26,
        0,
        0,
        244,
        239,
        1,
        0,
        0,
        0,
        245,
        246,
        1,
        0,
        0,
        0,
        246,
        244,
        1,
        0,
        0,
        0,
        246,
        247,
        1,
        0,
        0,
        0,
        247,
        254,
        1,
        0,
        0,
        0,
        248,
        254,
        5,
        64,
        0,
        0,
        249,
        250,
        5,
        1,
        0,
        0,
        250,
        251,
        3,
        20,
        10,
        0,
        251,
        252,
        5,
        2,
        0,
        0,
        252,
        254,
        1,
        0,
        0,
        0,
        253,
        193,
        1,
        0,
        0,
        0,
        253,
        202,
        1,
        0,
        0,
        0,
        253,
        204,
        1,
        0,
        0,
        0,
        253,
        206,
        1,
        0,
        0,
        0,
        253,
        208,
        1,
        0,
        0,
        0,
        253,
        210,
        1,
        0,
        0,
        0,
        253,
        212,
        1,
        0,
        0,
        0,
        253,
        225,
        1,
        0,
        0,
        0,
        253,
        226,
        1,
        0,
        0,
        0,
        253,
        228,
        1,
        0,
        0,
        0,
        253,
        248,
        1,
        0,
        0,
        0,
        253,
        249,
        1,
        0,
        0,
        0,
        254,
        315,
        1,
        0,
        0,
        0,
        255,
        256,
        10,
        19,
        0,
        0,
        256,
        257,
        3,
        24,
        12,
        0,
        257,
        258,
        3,
        20,
        10,
        20,
        258,
        314,
        1,
        0,
        0,
        0,
        259,
        260,
        10,
        18,
        0,
        0,
        260,
        261,
        5,
        16,
        0,
        0,
        261,
        262,
        3,
        20,
        10,
        0,
        262,
        263,
        5,
        17,
        0,
        0,
        263,
        264,
        3,
        20,
        10,
        19,
        264,
        314,
        1,
        0,
        0,
        0,
        265,
        266,
        10,
        17,
        0,
        0,
        266,
        267,
        3,
        30,
        15,
        0,
        267,
        268,
        3,
        20,
        10,
        18,
        268,
        314,
        1,
        0,
        0,
        0,
        269,
        270,
        10,
        16,
        0,
        0,
        270,
        271,
        3,
        28,
        14,
        0,
        271,
        272,
        3,
        20,
        10,
        17,
        272,
        314,
        1,
        0,
        0,
        0,
        273,
        274,
        10,
        14,
        0,
        0,
        274,
        314,
        5,
        18,
        0,
        0,
        275,
        276,
        10,
        12,
        0,
        0,
        276,
        314,
        5,
        19,
        0,
        0,
        277,
        278,
        10,
        7,
        0,
        0,
        278,
        279,
        5,
        23,
        0,
        0,
        279,
        292,
        5,
        64,
        0,
        0,
        280,
        289,
        5,
        1,
        0,
        0,
        281,
        286,
        3,
        20,
        10,
        0,
        282,
        283,
        5,
        7,
        0,
        0,
        283,
        285,
        3,
        20,
        10,
        0,
        284,
        282,
        1,
        0,
        0,
        0,
        285,
        288,
        1,
        0,
        0,
        0,
        286,
        284,
        1,
        0,
        0,
        0,
        286,
        287,
        1,
        0,
        0,
        0,
        287,
        290,
        1,
        0,
        0,
        0,
        288,
        286,
        1,
        0,
        0,
        0,
        289,
        281,
        1,
        0,
        0,
        0,
        289,
        290,
        1,
        0,
        0,
        0,
        290,
        291,
        1,
        0,
        0,
        0,
        291,
        293,
        5,
        2,
        0,
        0,
        292,
        280,
        1,
        0,
        0,
        0,
        292,
        293,
        1,
        0,
        0,
        0,
        293,
        314,
        1,
        0,
        0,
        0,
        294,
        301,
        10,
        2,
        0,
        0,
        295,
        296,
        5,
        25,
        0,
        0,
        296,
        297,
        3,
        20,
        10,
        0,
        297,
        298,
        5,
        26,
        0,
        0,
        298,
        300,
        1,
        0,
        0,
        0,
        299,
        295,
        1,
        0,
        0,
        0,
        300,
        303,
        1,
        0,
        0,
        0,
        301,
        299,
        1,
        0,
        0,
        0,
        301,
        302,
        1,
        0,
        0,
        0,
        302,
        309,
        1,
        0,
        0,
        0,
        303,
        301,
        1,
        0,
        0,
        0,
        304,
        306,
        5,
        25,
        0,
        0,
        305,
        307,
        3,
        20,
        10,
        0,
        306,
        305,
        1,
        0,
        0,
        0,
        306,
        307,
        1,
        0,
        0,
        0,
        307,
        308,
        1,
        0,
        0,
        0,
        308,
        310,
        5,
        26,
        0,
        0,
        309,
        304,
        1,
        0,
        0,
        0,
        310,
        311,
        1,
        0,
        0,
        0,
        311,
        309,
        1,
        0,
        0,
        0,
        311,
        312,
        1,
        0,
        0,
        0,
        312,
        314,
        1,
        0,
        0,
        0,
        313,
        255,
        1,
        0,
        0,
        0,
        313,
        259,
        1,
        0,
        0,
        0,
        313,
        265,
        1,
        0,
        0,
        0,
        313,
        269,
        1,
        0,
        0,
        0,
        313,
        273,
        1,
        0,
        0,
        0,
        313,
        275,
        1,
        0,
        0,
        0,
        313,
        277,
        1,
        0,
        0,
        0,
        313,
        294,
        1,
        0,
        0,
        0,
        314,
        317,
        1,
        0,
        0,
        0,
        315,
        313,
        1,
        0,
        0,
        0,
        315,
        316,
        1,
        0,
        0,
        0,
        316,
        21,
        1,
        0,
        0,
        0,
        317,
        315,
        1,
        0,
        0,
        0,
        318,
        319,
        5,
        64,
        0,
        0,
        319,
        320,
        3,
        26,
        13,
        0,
        320,
        321,
        3,
        20,
        10,
        0,
        321,
        23,
        1,
        0,
        0,
        0,
        322,
        323,
        7,
        0,
        0,
        0,
        323,
        25,
        1,
        0,
        0,
        0,
        324,
        325,
        7,
        1,
        0,
        0,
        325,
        27,
        1,
        0,
        0,
        0,
        326,
        327,
        7,
        2,
        0,
        0,
        327,
        29,
        1,
        0,
        0,
        0,
        328,
        329,
        7,
        3,
        0,
        0,
        329,
        31,
        1,
        0,
        0,
        0,
        330,
        335,
        3,
        34,
        17,
        0,
        331,
        332,
        5,
        7,
        0,
        0,
        332,
        334,
        3,
        34,
        17,
        0,
        333,
        331,
        1,
        0,
        0,
        0,
        334,
        337,
        1,
        0,
        0,
        0,
        335,
        333,
        1,
        0,
        0,
        0,
        335,
        336,
        1,
        0,
        0,
        0,
        336,
        33,
        1,
        0,
        0,
        0,
        337,
        335,
        1,
        0,
        0,
        0,
        338,
        339,
        3,
        36,
        18,
        0,
        339,
        340,
        5,
        64,
        0,
        0,
        340,
        345,
        1,
        0,
        0,
        0,
        341,
        342,
        3,
        38,
        19,
        0,
        342,
        343,
        5,
        64,
        0,
        0,
        343,
        345,
        1,
        0,
        0,
        0,
        344,
        338,
        1,
        0,
        0,
        0,
        344,
        341,
        1,
        0,
        0,
        0,
        345,
        35,
        1,
        0,
        0,
        0,
        346,
        347,
        7,
        4,
        0,
        0,
        347,
        37,
        1,
        0,
        0,
        0,
        348,
        351,
        3,
        36,
        18,
        0,
        349,
        350,
        5,
        25,
        0,
        0,
        350,
        352,
        5,
        26,
        0,
        0,
        351,
        349,
        1,
        0,
        0,
        0,
        352,
        353,
        1,
        0,
        0,
        0,
        353,
        351,
        1,
        0,
        0,
        0,
        353,
        354,
        1,
        0,
        0,
        0,
        354,
        39,
        1,
        0,
        0,
        0,
        355,
        356,
        7,
        5,
        0,
        0,
        356,
        41,
        1,
        0,
        0,
        0,
        357,
        363,
        5,
        65,
        0,
        0,
        358,
        363,
        3,
        48,
        24,
        0,
        359,
        363,
        5,
        58,
        0,
        0,
        360,
        363,
        5,
        59,
        0,
        0,
        361,
        363,
        5,
        60,
        0,
        0,
        362,
        357,
        1,
        0,
        0,
        0,
        362,
        358,
        1,
        0,
        0,
        0,
        362,
        359,
        1,
        0,
        0,
        0,
        362,
        360,
        1,
        0,
        0,
        0,
        362,
        361,
        1,
        0,
        0,
        0,
        363,
        43,
        1,
        0,
        0,
        0,
        364,
        374,
        5,
        61,
        0,
        0,
        365,
        367,
        5,
        69,
        0,
        0,
        366,
        365,
        1,
        0,
        0,
        0,
        366,
        367,
        1,
        0,
        0,
        0,
        367,
        368,
        1,
        0,
        0,
        0,
        368,
        370,
        3,
        46,
        23,
        0,
        369,
        371,
        5,
        69,
        0,
        0,
        370,
        369,
        1,
        0,
        0,
        0,
        370,
        371,
        1,
        0,
        0,
        0,
        371,
        373,
        1,
        0,
        0,
        0,
        372,
        366,
        1,
        0,
        0,
        0,
        373,
        376,
        1,
        0,
        0,
        0,
        374,
        372,
        1,
        0,
        0,
        0,
        374,
        375,
        1,
        0,
        0,
        0,
        375,
        377,
        1,
        0,
        0,
        0,
        376,
        374,
        1,
        0,
        0,
        0,
        377,
        378,
        5,
        62,
        0,
        0,
        378,
        45,
        1,
        0,
        0,
        0,
        379,
        380,
        5,
        63,
        0,
        0,
        380,
        381,
        3,
        20,
        10,
        0,
        381,
        382,
        5,
        63,
        0,
        0,
        382,
        47,
        1,
        0,
        0,
        0,
        383,
        386,
        5,
        69,
        0,
        0,
        384,
        386,
        3,
        46,
        23,
        0,
        385,
        383,
        1,
        0,
        0,
        0,
        385,
        384,
        1,
        0,
        0,
        0,
        386,
        49,
        1,
        0,
        0,
        0,
        41,
        53,
        55,
        64,
        75,
        89,
        100,
        105,
        110,
        116,
        121,
        127,
        143,
        159,
        172,
        180,
        183,
        187,
        191,
        199,
        219,
        222,
        236,
        241,
        246,
        253,
        286,
        289,
        292,
        301,
        306,
        311,
        313,
        315,
        335,
        344,
        353,
        362,
        366,
        370,
        374,
        385,
    ]


class Mx_parserParser(Parser):

    grammarFileName = "Mx_parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'('",
        "')'",
        "'class'",
        "'{'",
        "'}'",
        "';'",
        "','",
        "'='",
        "'if'",
        "'else'",
        "'while'",
        "'for'",
        "'return'",
        "'break'",
        "'continue'",
        "'?'",
        "':'",
        "'++'",
        "'--'",
        "'!'",
        "'~'",
        "'-'",
        "'.'",
        "'new'",
        "'['",
        "']'",
        "'&&'",
        "'||'",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'%='",
        "'<<='",
        "'>>='",
        "'&='",
        "'^='",
        "'|='",
        "'+'",
        "'*'",
        "'/'",
        "'%'",
        "'<<'",
        "'>>'",
        "'&'",
        "'^'",
        "'|'",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'=='",
        "'!='",
        "'int'",
        "'bool'",
        "'string'",
        "'void'",
        "'true'",
        "'false'",
        "'null'",
        "'f\"'",
        "'\"'",
        "'$'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "IDENTIFIER",
        "INTEGER_CONSTANT",
        "LINE_COMMENT",
        "BLOCK_COMMENT",
        "WS",
        "STRING_CONTENT",
        "ESC",
    ]

    RULE_program = 0
    RULE_functionDefinition = 1
    RULE_classDefinition = 2
    RULE_globalVariableDeclaration = 3
    RULE_variableDeclaration = 4
    RULE_variableDeclarationparts = 5
    RULE_classMember = 6
    RULE_functionBody = 7
    RULE_statement = 8
    RULE_forControl = 9
    RULE_expression = 10
    RULE_assignmentExpression = 11
    RULE_logicOperator = 12
    RULE_assignmentOperator = 13
    RULE_arithmeticOperator = 14
    RULE_relationalOperator = 15
    RULE_parameterList = 16
    RULE_parameter = 17
    RULE_type = 18
    RULE_arrayType = 19
    RULE_returnType = 20
    RULE_constant = 21
    RULE_fstring = 22
    RULE_format_expression = 23
    RULE_string_constant = 24

    ruleNames = [
        "program",
        "functionDefinition",
        "classDefinition",
        "globalVariableDeclaration",
        "variableDeclaration",
        "variableDeclarationparts",
        "classMember",
        "functionBody",
        "statement",
        "forControl",
        "expression",
        "assignmentExpression",
        "logicOperator",
        "assignmentOperator",
        "arithmeticOperator",
        "relationalOperator",
        "parameterList",
        "parameter",
        "type",
        "arrayType",
        "returnType",
        "constant",
        "fstring",
        "format_expression",
        "string_constant",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    IDENTIFIER = 64
    INTEGER_CONSTANT = 65
    LINE_COMMENT = 66
    BLOCK_COMMENT = 67
    WS = 68
    STRING_CONTENT = 69
    ESC = 70

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class ProgramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Mx_parserParser.EOF, 0)

        def functionDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Mx_parserParser.FunctionDefinitionContext
                )
            else:
                return self.getTypedRuleContext(
                    Mx_parserParser.FunctionDefinitionContext, i
                )

        def classDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ClassDefinitionContext)
            else:
                return self.getTypedRuleContext(
                    Mx_parserParser.ClassDefinitionContext, i
                )

        def globalVariableDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Mx_parserParser.GlobalVariableDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    Mx_parserParser.GlobalVariableDeclarationContext, i
                )

        def getRuleIndex(self):
            return Mx_parserParser.RULE_program

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgram"):
                listener.enterProgram(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgram"):
                listener.exitProgram(self)

    def program(self):

        localctx = Mx_parserParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 55
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 3)) & ~0x3F) == 0 and (
                (1 << (_la - 3)) & 2339620006418972673
            ) != 0:
                self.state = 53
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 50
                    self.functionDefinition()
                    pass

                elif la_ == 2:
                    self.state = 51
                    self.classDefinition()
                    pass

                elif la_ == 3:
                    self.state = 52
                    self.globalVariableDeclaration()
                    pass

                self.state = 57
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 58
            self.match(Mx_parserParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnType(self):
            return self.getTypedRuleContext(Mx_parserParser.ReturnTypeContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def functionBody(self):
            return self.getTypedRuleContext(Mx_parserParser.FunctionBodyContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(Mx_parserParser.ParameterListContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_functionDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionDefinition"):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionDefinition"):
                listener.exitFunctionDefinition(self)

    def functionDefinition(self):

        localctx = Mx_parserParser.FunctionDefinitionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 2, self.RULE_functionDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 60
            self.returnType()
            self.state = 61
            self.match(Mx_parserParser.IDENTIFIER)
            self.state = 62
            self.match(Mx_parserParser.T__0)
            self.state = 64
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 54)) & ~0x3F) == 0 and ((1 << (_la - 54)) & 1031) != 0:
                self.state = 63
                self.parameterList()

            self.state = 66
            self.match(Mx_parserParser.T__1)
            self.state = 67
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def classMember(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ClassMemberContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ClassMemberContext, i)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_classDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassDefinition"):
                listener.enterClassDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassDefinition"):
                listener.exitClassDefinition(self)

    def classDefinition(self):

        localctx = Mx_parserParser.ClassDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_classDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 69
            self.match(Mx_parserParser.T__2)
            self.state = 70
            self.match(Mx_parserParser.IDENTIFIER)
            self.state = 71
            self.match(Mx_parserParser.T__3)
            self.state = 75
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 54)) & ~0x3F) == 0 and ((1 << (_la - 54)) & 1039) != 0:
                self.state = 72
                self.classMember()
                self.state = 77
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 78
            self.match(Mx_parserParser.T__4)
            self.state = 79
            self.match(Mx_parserParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalVariableDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(
                Mx_parserParser.VariableDeclarationContext, 0
            )

        def getRuleIndex(self):
            return Mx_parserParser.RULE_globalVariableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobalVariableDeclaration"):
                listener.enterGlobalVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobalVariableDeclaration"):
                listener.exitGlobalVariableDeclaration(self)

    def globalVariableDeclaration(self):

        localctx = Mx_parserParser.GlobalVariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 6, self.RULE_globalVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            self.variableDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Mx_parserParser.TypeContext, 0)

        def variableDeclarationparts(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Mx_parserParser.VariableDeclarationpartsContext
                )
            else:
                return self.getTypedRuleContext(
                    Mx_parserParser.VariableDeclarationpartsContext, i
                )

        def arrayType(self):
            return self.getTypedRuleContext(Mx_parserParser.ArrayTypeContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_variableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclaration"):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclaration"):
                listener.exitVariableDeclaration(self)

    def variableDeclaration(self):

        localctx = Mx_parserParser.VariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 8, self.RULE_variableDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 83
                self.type_()
                self.state = 84
                self.variableDeclarationparts()
                self.state = 89
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 7:
                    self.state = 85
                    self.match(Mx_parserParser.T__6)
                    self.state = 86
                    self.variableDeclarationparts()
                    self.state = 91
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 92
                self.match(Mx_parserParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 94
                self.arrayType()
                self.state = 95
                self.variableDeclarationparts()
                self.state = 100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == 7:
                    self.state = 96
                    self.match(Mx_parserParser.T__6)
                    self.state = 97
                    self.variableDeclarationparts()
                    self.state = 102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 103
                self.match(Mx_parserParser.T__5)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationpartsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_variableDeclarationparts

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclarationparts"):
                listener.enterVariableDeclarationparts(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclarationparts"):
                listener.exitVariableDeclarationparts(self)

    def variableDeclarationparts(self):

        localctx = Mx_parserParser.VariableDeclarationpartsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 10, self.RULE_variableDeclarationparts)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.match(Mx_parserParser.IDENTIFIER)
            self.state = 110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 8:
                self.state = 108
                self.match(Mx_parserParser.T__7)
                self.state = 109
                self.expression(0)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassMemberContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(
                Mx_parserParser.VariableDeclarationContext, 0
            )

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def functionBody(self):
            return self.getTypedRuleContext(Mx_parserParser.FunctionBodyContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(Mx_parserParser.ParameterListContext, 0)

        def functionDefinition(self):
            return self.getTypedRuleContext(
                Mx_parserParser.FunctionDefinitionContext, 0
            )

        def getRuleIndex(self):
            return Mx_parserParser.RULE_classMember

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassMember"):
                listener.enterClassMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassMember"):
                listener.exitClassMember(self)

    def classMember(self):

        localctx = Mx_parserParser.ClassMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classMember)
        self._la = 0  # Token type
        try:
            self.state = 121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 112
                self.variableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self.match(Mx_parserParser.IDENTIFIER)
                self.state = 114
                self.match(Mx_parserParser.T__0)
                self.state = 116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 54)) & ~0x3F) == 0 and ((1 << (_la - 54)) & 1031) != 0:
                    self.state = 115
                    self.parameterList()

                self.state = 118
                self.match(Mx_parserParser.T__1)
                self.state = 119
                self.functionBody()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 120
                self.functionDefinition()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.StatementContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.StatementContext, i)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_functionBody

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionBody"):
                listener.enterFunctionBody(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionBody"):
                listener.exitFunctionBody(self)

    def functionBody(self):

        localctx = Mx_parserParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_functionBody)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self.match(Mx_parserParser.T__3)
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0 and ((1 << _la) & -7079658614201451950) != 0
            ) or ((((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0):
                self.state = 124
                self.statement()
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 130
            self.match(Mx_parserParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Mx_parserParser.RULE_statement

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class WhileStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(Mx_parserParser.StatementContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhileStatement"):
                listener.enterWhileStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhileStatement"):
                listener.exitWhileStatement(self)

    class EmptyStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmptyStatement"):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmptyStatement"):
                listener.exitEmptyStatement(self)

    class AssignmentStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentStatement"):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentStatement"):
                listener.exitAssignmentStatement(self)

    class PrivatevariableDeclarationContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableDeclaration(self):
            return self.getTypedRuleContext(
                Mx_parserParser.VariableDeclarationContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrivatevariableDeclaration"):
                listener.enterPrivatevariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrivatevariableDeclaration"):
                listener.exitPrivatevariableDeclaration(self)

    class ForStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def forControl(self):
            return self.getTypedRuleContext(Mx_parserParser.ForControlContext, 0)

        def statement(self):
            return self.getTypedRuleContext(Mx_parserParser.StatementContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForStatement"):
                listener.enterForStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForStatement"):
                listener.exitForStatement(self)

    class BreakStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBreakStatement"):
                listener.enterBreakStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBreakStatement"):
                listener.exitBreakStatement(self)

    class ExpressionStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionStatement"):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionStatement"):
                listener.exitExpressionStatement(self)

    class BlockContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.StatementContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.StatementContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

    class ContinueStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContinueStatement"):
                listener.enterContinueStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContinueStatement"):
                listener.exitContinueStatement(self)

    class IfStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.StatementContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.StatementContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIfStatement"):
                listener.enterIfStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIfStatement"):
                listener.exitIfStatement(self)

    class ReturnStatementContext(StatementContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)

    def statement(self):

        localctx = Mx_parserParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_statement)
        self._la = 0  # Token type
        try:
            self.state = 180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
            if la_ == 1:
                localctx = Mx_parserParser.EmptyStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 132
                self.match(Mx_parserParser.T__5)
                pass

            elif la_ == 2:
                localctx = Mx_parserParser.ExpressionStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 133
                self.expression(0)
                self.state = 134
                self.match(Mx_parserParser.T__5)
                pass

            elif la_ == 3:
                localctx = Mx_parserParser.IfStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 136
                self.match(Mx_parserParser.T__8)
                self.state = 137
                self.match(Mx_parserParser.T__0)
                self.state = 138
                self.expression(0)
                self.state = 139
                self.match(Mx_parserParser.T__1)
                self.state = 140
                self.statement()
                self.state = 143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
                if la_ == 1:
                    self.state = 141
                    self.match(Mx_parserParser.T__9)
                    self.state = 142
                    self.statement()

                pass

            elif la_ == 4:
                localctx = Mx_parserParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 145
                self.match(Mx_parserParser.T__10)
                self.state = 146
                self.match(Mx_parserParser.T__0)
                self.state = 147
                self.expression(0)
                self.state = 148
                self.match(Mx_parserParser.T__1)
                self.state = 149
                self.statement()
                pass

            elif la_ == 5:
                localctx = Mx_parserParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 151
                self.match(Mx_parserParser.T__11)
                self.state = 152
                self.match(Mx_parserParser.T__0)
                self.state = 153
                self.forControl()
                self.state = 154
                self.match(Mx_parserParser.T__1)
                self.state = 155
                self.statement()
                pass

            elif la_ == 6:
                localctx = Mx_parserParser.ReturnStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 157
                self.match(Mx_parserParser.T__12)
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & -7205759403767889918) != 0
                ) or ((((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0):
                    self.state = 158
                    self.expression(0)

                self.state = 161
                self.match(Mx_parserParser.T__5)
                pass

            elif la_ == 7:
                localctx = Mx_parserParser.PrivatevariableDeclarationContext(
                    self, localctx
                )
                self.enterOuterAlt(localctx, 7)
                self.state = 162
                self.variableDeclaration()
                pass

            elif la_ == 8:
                localctx = Mx_parserParser.AssignmentStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 163
                self.expression(0)
                self.state = 164
                self.match(Mx_parserParser.T__7)
                self.state = 165
                self.expression(0)
                self.state = 166
                self.match(Mx_parserParser.T__5)
                pass

            elif la_ == 9:
                localctx = Mx_parserParser.BlockContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 168
                self.match(Mx_parserParser.T__3)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & -7079658614201451950) != 0
                ) or ((((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0):
                    self.state = 169
                    self.statement()
                    self.state = 174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 175
                self.match(Mx_parserParser.T__4)
                pass

            elif la_ == 10:
                localctx = Mx_parserParser.BreakStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 176
                self.match(Mx_parserParser.T__13)
                self.state = 177
                self.match(Mx_parserParser.T__5)
                pass

            elif la_ == 11:
                localctx = Mx_parserParser.ContinueStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 178
                self.match(Mx_parserParser.T__14)
                self.state = 179
                self.match(Mx_parserParser.T__5)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForControlContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_forControl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForControl"):
                listener.enterForControl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForControl"):
                listener.exitForControl(self)

    def forControl(self):

        localctx = Mx_parserParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_forControl)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & -7205759403767889918) != 0) or (
                (((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0
            ):
                self.state = 182
                self.expression(0)

            self.state = 185
            self.match(Mx_parserParser.T__5)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & -7205759403767889918) != 0) or (
                (((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0
            ):
                self.state = 186
                self.expression(0)

            self.state = 189
            self.match(Mx_parserParser.T__5)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3F) == 0 and ((1 << _la) & -7205759403767889918) != 0) or (
                (((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0
            ):
                self.state = 190
                self.expression(0)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Mx_parserParser.RULE_expression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class LogicalNotExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalNotExpression"):
                listener.enterLogicalNotExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalNotExpression"):
                listener.exitLogicalNotExpression(self)

    class PostfixIncrementExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixIncrementExpression"):
                listener.enterPostfixIncrementExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixIncrementExpression"):
                listener.exitPostfixIncrementExpression(self)

    class ConstantExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(Mx_parserParser.ConstantContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantExpression"):
                listener.enterConstantExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantExpression"):
                listener.exitConstantExpression(self)

    class ArrayExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayExpression"):
                listener.enterArrayExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayExpression"):
                listener.exitArrayExpression(self)

    class ConditionalExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConditionalExpression"):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConditionalExpression"):
                listener.exitConditionalExpression(self)

    class RelationalExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def relationalOperator(self):
            return self.getTypedRuleContext(
                Mx_parserParser.RelationalOperatorContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalExpression"):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalExpression"):
                listener.exitRelationalExpression(self)

    class PostfixDecrementExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPostfixDecrementExpression"):
                listener.enterPostfixDecrementExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPostfixDecrementExpression"):
                listener.exitPostfixDecrementExpression(self)

    class ArithmeticExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def arithmeticOperator(self):
            return self.getTypedRuleContext(
                Mx_parserParser.ArithmeticOperatorContext, 0
            )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticExpression"):
                listener.enterArithmeticExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticExpression"):
                listener.exitArithmeticExpression(self)

    class VariableExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableExpression"):
                listener.enterVariableExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableExpression"):
                listener.exitVariableExpression(self)

    class PrefixIncrementExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrefixIncrementExpression"):
                listener.enterPrefixIncrementExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrefixIncrementExpression"):
                listener.exitPrefixIncrementExpression(self)

    class NewVariableExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(Mx_parserParser.TypeContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewVariableExpression"):
                listener.enterNewVariableExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewVariableExpression"):
                listener.exitNewVariableExpression(self)

    class UnaryMinusExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryMinusExpression"):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryMinusExpression"):
                listener.exitUnaryMinusExpression(self)

    class ExpressionListContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignmentExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Mx_parserParser.AssignmentExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Mx_parserParser.AssignmentExpressionContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionList"):
                listener.enterExpressionList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionList"):
                listener.exitExpressionList(self)

    class ParenthesesExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParenthesesExpression"):
                listener.enterParenthesesExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParenthesesExpression"):
                listener.exitParenthesesExpression(self)

    class MemberFunctionCallContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMemberFunctionCall"):
                listener.enterMemberFunctionCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMemberFunctionCall"):
                listener.exitMemberFunctionCall(self)

    class BitwiseNotExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitwiseNotExpression"):
                listener.enterBitwiseNotExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitwiseNotExpression"):
                listener.exitBitwiseNotExpression(self)

    class FunctionCallContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionCall"):
                listener.enterFunctionCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionCall"):
                listener.exitFunctionCall(self)

    class LogicExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def logicOperator(self):
            return self.getTypedRuleContext(Mx_parserParser.LogicOperatorContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicExpression"):
                listener.enterLogicExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicExpression"):
                listener.exitLogicExpression(self)

    class NewArrayExpressionContext(ExpressionContext):

        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a Mx_parserParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def type_(self):
            return self.getTypedRuleContext(Mx_parserParser.TypeContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, i)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNewArrayExpression"):
                listener.enterNewArrayExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNewArrayExpression"):
                listener.exitNewArrayExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Mx_parserParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_expression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
            if la_ == 1:
                localctx = Mx_parserParser.ExpressionListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 194
                self.assignmentExpression()
                self.state = 199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 18, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 195
                        self.match(Mx_parserParser.T__6)
                        self.state = 196
                        self.assignmentExpression()
                    self.state = 201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 18, self._ctx)

                pass

            elif la_ == 2:
                localctx = Mx_parserParser.PrefixIncrementExpressionContext(
                    self, localctx
                )
                self._ctx = localctx
                _prevctx = localctx
                self.state = 202
                self.match(Mx_parserParser.T__17)
                self.state = 203
                self.expression(15)
                pass

            elif la_ == 3:
                localctx = Mx_parserParser.PostfixDecrementExpressionContext(
                    self, localctx
                )
                self._ctx = localctx
                _prevctx = localctx
                self.state = 204
                self.match(Mx_parserParser.T__18)
                self.state = 205
                self.expression(13)
                pass

            elif la_ == 4:
                localctx = Mx_parserParser.LogicalNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 206
                self.match(Mx_parserParser.T__19)
                self.state = 207
                self.expression(11)
                pass

            elif la_ == 5:
                localctx = Mx_parserParser.BitwiseNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 208
                self.match(Mx_parserParser.T__20)
                self.state = 209
                self.expression(10)
                pass

            elif la_ == 6:
                localctx = Mx_parserParser.UnaryMinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 210
                self.match(Mx_parserParser.T__21)
                self.state = 211
                self.expression(9)
                pass

            elif la_ == 7:
                localctx = Mx_parserParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 212
                self.match(Mx_parserParser.IDENTIFIER)
                self.state = 213
                self.match(Mx_parserParser.T__0)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0 and ((1 << _la) & -7205759403767889918) != 0
                ) or ((((_la - 64)) & ~0x3F) == 0 and ((1 << (_la - 64)) & 35) != 0):
                    self.state = 214
                    self.expression(0)
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == 7:
                        self.state = 215
                        self.match(Mx_parserParser.T__6)
                        self.state = 216
                        self.expression(0)
                        self.state = 221
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 224
                self.match(Mx_parserParser.T__1)
                pass

            elif la_ == 8:
                localctx = Mx_parserParser.ConstantExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 225
                self.constant()
                pass

            elif la_ == 9:
                localctx = Mx_parserParser.NewVariableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 226
                self.match(Mx_parserParser.T__23)
                self.state = 227
                self.type_()
                pass

            elif la_ == 10:
                localctx = Mx_parserParser.NewArrayExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 228
                self.match(Mx_parserParser.T__23)
                self.state = 229
                self.type_()
                self.state = 236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 230
                        self.match(Mx_parserParser.T__24)
                        self.state = 231
                        self.expression(0)
                        self.state = 232
                        self.match(Mx_parserParser.T__25)
                    self.state = 238
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 21, self._ctx)

                self.state = 244
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 239
                        self.match(Mx_parserParser.T__24)
                        self.state = 241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            ((_la) & ~0x3F) == 0
                            and ((1 << _la) & -7205759403767889918) != 0
                        ) or (
                            (((_la - 64)) & ~0x3F) == 0
                            and ((1 << (_la - 64)) & 35) != 0
                        ):
                            self.state = 240
                            self.expression(0)

                        self.state = 243
                        self.match(Mx_parserParser.T__25)

                    else:
                        raise NoViableAltException(self)
                    self.state = 246
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 23, self._ctx)

                pass

            elif la_ == 11:
                localctx = Mx_parserParser.VariableExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 248
                self.match(Mx_parserParser.IDENTIFIER)
                pass

            elif la_ == 12:
                localctx = Mx_parserParser.ParenthesesExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 249
                self.match(Mx_parserParser.T__0)
                self.state = 250
                self.expression(0)
                self.state = 251
                self.match(Mx_parserParser.T__1)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 32, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 313
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
                    if la_ == 1:
                        localctx = Mx_parserParser.LogicExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 255
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 19)"
                            )
                        self.state = 256
                        self.logicOperator()
                        self.state = 257
                        self.expression(20)
                        pass

                    elif la_ == 2:
                        localctx = Mx_parserParser.ConditionalExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 259
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 18)"
                            )
                        self.state = 260
                        self.match(Mx_parserParser.T__15)
                        self.state = 261
                        self.expression(0)
                        self.state = 262
                        self.match(Mx_parserParser.T__16)
                        self.state = 263
                        self.expression(19)
                        pass

                    elif la_ == 3:
                        localctx = Mx_parserParser.RelationalExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 265
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 17)"
                            )
                        self.state = 266
                        self.relationalOperator()
                        self.state = 267
                        self.expression(18)
                        pass

                    elif la_ == 4:
                        localctx = Mx_parserParser.ArithmeticExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 269
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 16)"
                            )
                        self.state = 270
                        self.arithmeticOperator()
                        self.state = 271
                        self.expression(17)
                        pass

                    elif la_ == 5:
                        localctx = Mx_parserParser.PostfixIncrementExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 273
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 14)"
                            )
                        self.state = 274
                        self.match(Mx_parserParser.T__17)
                        pass

                    elif la_ == 6:
                        localctx = Mx_parserParser.PostfixDecrementExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 275
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 12)"
                            )
                        self.state = 276
                        self.match(Mx_parserParser.T__18)
                        pass

                    elif la_ == 7:
                        localctx = Mx_parserParser.MemberFunctionCallContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 277
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 7)"
                            )
                        self.state = 278
                        self.match(Mx_parserParser.T__22)
                        self.state = 279
                        self.match(Mx_parserParser.IDENTIFIER)
                        self.state = 292
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input, 27, self._ctx)
                        if la_ == 1:
                            self.state = 280
                            self.match(Mx_parserParser.T__0)
                            self.state = 289
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (
                                ((_la) & ~0x3F) == 0
                                and ((1 << _la) & -7205759403767889918) != 0
                            ) or (
                                (((_la - 64)) & ~0x3F) == 0
                                and ((1 << (_la - 64)) & 35) != 0
                            ):
                                self.state = 281
                                self.expression(0)
                                self.state = 286
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la == 7:
                                    self.state = 282
                                    self.match(Mx_parserParser.T__6)
                                    self.state = 283
                                    self.expression(0)
                                    self.state = 288
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                            self.state = 291
                            self.match(Mx_parserParser.T__1)

                        pass

                    elif la_ == 8:
                        localctx = Mx_parserParser.ArrayExpressionContext(
                            self,
                            Mx_parserParser.ExpressionContext(
                                self, _parentctx, _parentState
                            ),
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 294
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 301
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input, 28, self._ctx)
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 295
                                self.match(Mx_parserParser.T__24)
                                self.state = 296
                                self.expression(0)
                                self.state = 297
                                self.match(Mx_parserParser.T__25)
                            self.state = 303
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(
                                self._input, 28, self._ctx
                            )

                        self.state = 309
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 304
                                self.match(Mx_parserParser.T__24)
                                self.state = 306
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if (
                                    ((_la) & ~0x3F) == 0
                                    and ((1 << _la) & -7205759403767889918) != 0
                                ) or (
                                    (((_la - 64)) & ~0x3F) == 0
                                    and ((1 << (_la - 64)) & 35) != 0
                                ):
                                    self.state = 305
                                    self.expression(0)

                                self.state = 308
                                self.match(Mx_parserParser.T__25)

                            else:
                                raise NoViableAltException(self)
                            self.state = 311
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(
                                self._input, 30, self._ctx
                            )

                        pass

                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 32, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(
                Mx_parserParser.AssignmentOperatorContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_assignmentExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentExpression"):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentExpression"):
                listener.exitAssignmentExpression(self)

    def assignmentExpression(self):

        localctx = Mx_parserParser.AssignmentExpressionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 22, self.RULE_assignmentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(Mx_parserParser.IDENTIFIER)
            self.state = 319
            self.assignmentOperator()
            self.state = 320
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Mx_parserParser.RULE_logicOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicOperator"):
                listener.enterLogicOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicOperator"):
                listener.exitLogicOperator(self)

    def logicOperator(self):

        localctx = Mx_parserParser.LogicOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_logicOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            _la = self._input.LA(1)
            if not (_la == 27 or _la == 28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Mx_parserParser.RULE_assignmentOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentOperator"):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentOperator"):
                listener.exitAssignmentOperator(self)

    def assignmentOperator(self):

        localctx = Mx_parserParser.AssignmentOperatorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 26, self.RULE_assignmentOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 549218943232) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Mx_parserParser.RULE_arithmeticOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArithmeticOperator"):
                listener.enterArithmeticOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArithmeticOperator"):
                listener.exitArithmeticOperator(self)

    def arithmeticOperator(self):

        localctx = Mx_parserParser.ArithmeticOperatorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 28, self.RULE_arithmeticOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 280925225091072) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return Mx_parserParser.RULE_relationalOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalOperator"):
                listener.enterRelationalOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalOperator"):
                listener.exitRelationalOperator(self)

    def relationalOperator(self):

        localctx = Mx_parserParser.RelationalOperatorContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 30, self.RULE_relationalOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 17732923532771328) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(Mx_parserParser.ParameterContext)
            else:
                return self.getTypedRuleContext(Mx_parserParser.ParameterContext, i)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_parameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterList"):
                listener.enterParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterList"):
                listener.exitParameterList(self)

    def parameterList(self):

        localctx = Mx_parserParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_parameterList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.parameter()
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 7:
                self.state = 331
                self.match(Mx_parserParser.T__6)
                self.state = 332
                self.parameter()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Mx_parserParser.TypeContext, 0)

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def arrayType(self):
            return self.getTypedRuleContext(Mx_parserParser.ArrayTypeContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_parameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameter"):
                listener.enterParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameter"):
                listener.exitParameter(self)

    def parameter(self):

        localctx = Mx_parserParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_parameter)
        try:
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 34, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.type_()
                self.state = 339
                self.match(Mx_parserParser.IDENTIFIER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.arrayType()
                self.state = 342
                self.match(Mx_parserParser.IDENTIFIER)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType"):
                listener.enterType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType"):
                listener.exitType(self)

    def type_(self):

        localctx = Mx_parserParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            _la = self._input.LA(1)
            if not (((((_la - 54)) & ~0x3F) == 0 and ((1 << (_la - 54)) & 1031) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(Mx_parserParser.TypeContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_arrayType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArrayType"):
                listener.enterArrayType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArrayType"):
                listener.exitArrayType(self)

    def arrayType(self):

        localctx = Mx_parserParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_arrayType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.type_()
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 349
                self.match(Mx_parserParser.T__24)
                self.state = 350
                self.match(Mx_parserParser.T__25)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 25):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Mx_parserParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_returnType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnType"):
                listener.enterReturnType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnType"):
                listener.exitReturnType(self)

    def returnType(self):

        localctx = Mx_parserParser.ReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_returnType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            _la = self._input.LA(1)
            if not (((((_la - 54)) & ~0x3F) == 0 and ((1 << (_la - 54)) & 1039) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_CONSTANT(self):
            return self.getToken(Mx_parserParser.INTEGER_CONSTANT, 0)

        def string_constant(self):
            return self.getTypedRuleContext(Mx_parserParser.String_constantContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_constant

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstant"):
                listener.enterConstant(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstant"):
                listener.exitConstant(self)

    def constant(self):

        localctx = Mx_parserParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constant)
        try:
            self.state = 362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.match(Mx_parserParser.INTEGER_CONSTANT)
                pass
            elif token in [63, 69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 358
                self.string_constant()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 3)
                self.state = 359
                self.match(Mx_parserParser.T__57)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 4)
                self.state = 360
                self.match(Mx_parserParser.T__58)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                self.match(Mx_parserParser.T__59)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FstringContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.text = None  # Token

        def format_expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    Mx_parserParser.Format_expressionContext
                )
            else:
                return self.getTypedRuleContext(
                    Mx_parserParser.Format_expressionContext, i
                )

        def STRING_CONTENT(self, i: int = None):
            if i is None:
                return self.getTokens(Mx_parserParser.STRING_CONTENT)
            else:
                return self.getToken(Mx_parserParser.STRING_CONTENT, i)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_fstring

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFstring"):
                listener.enterFstring(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFstring"):
                listener.exitFstring(self)

    def fstring(self):

        localctx = Mx_parserParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fstring)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(Mx_parserParser.T__60)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 63 or _la == 69:
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 69:
                    self.state = 365
                    localctx.text = self.match(Mx_parserParser.STRING_CONTENT)

                self.state = 368
                self.format_expression()
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
                if la_ == 1:
                    self.state = 369
                    localctx.text = self.match(Mx_parserParser.STRING_CONTENT)

                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self.match(Mx_parserParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Format_expressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Mx_parserParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_format_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFormat_expression"):
                listener.enterFormat_expression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFormat_expression"):
                listener.exitFormat_expression(self)

    def format_expression(self):

        localctx = Mx_parserParser.Format_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_format_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(Mx_parserParser.T__62)
            self.state = 380
            self.expression(0)
            self.state = 381
            self.match(Mx_parserParser.T__62)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_constantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_CONTENT(self):
            return self.getToken(Mx_parserParser.STRING_CONTENT, 0)

        def format_expression(self):
            return self.getTypedRuleContext(Mx_parserParser.Format_expressionContext, 0)

        def getRuleIndex(self):
            return Mx_parserParser.RULE_string_constant

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_constant"):
                listener.enterString_constant(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_constant"):
                listener.exitString_constant(self)

    def string_constant(self):

        localctx = Mx_parserParser.String_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_string_constant)
        try:
            self.state = 385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 383
                self.match(Mx_parserParser.STRING_CONTENT)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.format_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[10] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 19)

        if predIndex == 1:
            return self.precpred(self._ctx, 18)

        if predIndex == 2:
            return self.precpred(self._ctx, 17)

        if predIndex == 3:
            return self.precpred(self._ctx, 16)

        if predIndex == 4:
            return self.precpred(self._ctx, 14)

        if predIndex == 5:
            return self.precpred(self._ctx, 12)

        if predIndex == 6:
            return self.precpred(self._ctx, 7)

        if predIndex == 7:
            return self.precpred(self._ctx, 2)
