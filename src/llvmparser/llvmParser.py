# Generated from llvm.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        54,
        311,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        5,
        0,
        62,
        8,
        0,
        10,
        0,
        12,
        0,
        65,
        9,
        0,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        2,
        3,
        2,
        74,
        8,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        3,
        3,
        83,
        8,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        4,
        3,
        88,
        8,
        3,
        11,
        3,
        12,
        3,
        89,
        1,
        3,
        1,
        3,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        1,
        4,
        3,
        4,
        99,
        8,
        4,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        109,
        8,
        5,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        6,
        1,
        7,
        1,
        7,
        1,
        7,
        5,
        7,
        125,
        8,
        7,
        10,
        7,
        12,
        7,
        128,
        9,
        7,
        1,
        8,
        1,
        8,
        1,
        8,
        5,
        8,
        133,
        8,
        8,
        10,
        8,
        12,
        8,
        136,
        9,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        147,
        8,
        9,
        1,
        10,
        1,
        10,
        1,
        10,
        4,
        10,
        152,
        8,
        10,
        11,
        10,
        12,
        10,
        153,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        3,
        11,
        165,
        8,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        3,
        12,
        170,
        8,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        177,
        8,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        187,
        8,
        13,
        1,
        13,
        1,
        13,
        3,
        13,
        191,
        8,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        3,
        16,
        219,
        8,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        3,
        20,
        263,
        8,
        20,
        1,
        21,
        1,
        21,
        3,
        21,
        267,
        8,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        4,
        24,
        298,
        8,
        24,
        11,
        24,
        12,
        24,
        299,
        1,
        25,
        1,
        25,
        1,
        25,
        3,
        25,
        305,
        8,
        25,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        0,
        0,
        28,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        0,
        5,
        1,
        0,
        1,
        4,
        1,
        0,
        23,
        32,
        1,
        0,
        51,
        52,
        1,
        0,
        40,
        45,
        1,
        0,
        47,
        48,
        315,
        0,
        63,
        1,
        0,
        0,
        0,
        2,
        66,
        1,
        0,
        0,
        0,
        4,
        68,
        1,
        0,
        0,
        0,
        6,
        77,
        1,
        0,
        0,
        0,
        8,
        93,
        1,
        0,
        0,
        0,
        10,
        102,
        1,
        0,
        0,
        0,
        12,
        110,
        1,
        0,
        0,
        0,
        14,
        121,
        1,
        0,
        0,
        0,
        16,
        129,
        1,
        0,
        0,
        0,
        18,
        146,
        1,
        0,
        0,
        0,
        20,
        148,
        1,
        0,
        0,
        0,
        22,
        164,
        1,
        0,
        0,
        0,
        24,
        166,
        1,
        0,
        0,
        0,
        26,
        190,
        1,
        0,
        0,
        0,
        28,
        192,
        1,
        0,
        0,
        0,
        30,
        200,
        1,
        0,
        0,
        0,
        32,
        218,
        1,
        0,
        0,
        0,
        34,
        220,
        1,
        0,
        0,
        0,
        36,
        228,
        1,
        0,
        0,
        0,
        38,
        230,
        1,
        0,
        0,
        0,
        40,
        262,
        1,
        0,
        0,
        0,
        42,
        266,
        1,
        0,
        0,
        0,
        44,
        268,
        1,
        0,
        0,
        0,
        46,
        277,
        1,
        0,
        0,
        0,
        48,
        279,
        1,
        0,
        0,
        0,
        50,
        304,
        1,
        0,
        0,
        0,
        52,
        306,
        1,
        0,
        0,
        0,
        54,
        308,
        1,
        0,
        0,
        0,
        56,
        62,
        3,
        6,
        3,
        0,
        57,
        62,
        3,
        4,
        2,
        0,
        58,
        62,
        3,
        10,
        5,
        0,
        59,
        62,
        3,
        12,
        6,
        0,
        60,
        62,
        3,
        8,
        4,
        0,
        61,
        56,
        1,
        0,
        0,
        0,
        61,
        57,
        1,
        0,
        0,
        0,
        61,
        58,
        1,
        0,
        0,
        0,
        61,
        59,
        1,
        0,
        0,
        0,
        61,
        60,
        1,
        0,
        0,
        0,
        62,
        65,
        1,
        0,
        0,
        0,
        63,
        61,
        1,
        0,
        0,
        0,
        63,
        64,
        1,
        0,
        0,
        0,
        64,
        1,
        1,
        0,
        0,
        0,
        65,
        63,
        1,
        0,
        0,
        0,
        66,
        67,
        7,
        0,
        0,
        0,
        67,
        3,
        1,
        0,
        0,
        0,
        68,
        69,
        5,
        5,
        0,
        0,
        69,
        70,
        3,
        2,
        1,
        0,
        70,
        71,
        5,
        52,
        0,
        0,
        71,
        73,
        5,
        6,
        0,
        0,
        72,
        74,
        3,
        16,
        8,
        0,
        73,
        72,
        1,
        0,
        0,
        0,
        73,
        74,
        1,
        0,
        0,
        0,
        74,
        75,
        1,
        0,
        0,
        0,
        75,
        76,
        5,
        7,
        0,
        0,
        76,
        5,
        1,
        0,
        0,
        0,
        77,
        78,
        5,
        8,
        0,
        0,
        78,
        79,
        3,
        2,
        1,
        0,
        79,
        80,
        5,
        52,
        0,
        0,
        80,
        82,
        5,
        6,
        0,
        0,
        81,
        83,
        3,
        14,
        7,
        0,
        82,
        81,
        1,
        0,
        0,
        0,
        82,
        83,
        1,
        0,
        0,
        0,
        83,
        84,
        1,
        0,
        0,
        0,
        84,
        85,
        5,
        7,
        0,
        0,
        85,
        87,
        5,
        9,
        0,
        0,
        86,
        88,
        3,
        20,
        10,
        0,
        87,
        86,
        1,
        0,
        0,
        0,
        88,
        89,
        1,
        0,
        0,
        0,
        89,
        87,
        1,
        0,
        0,
        0,
        89,
        90,
        1,
        0,
        0,
        0,
        90,
        91,
        1,
        0,
        0,
        0,
        91,
        92,
        5,
        10,
        0,
        0,
        92,
        7,
        1,
        0,
        0,
        0,
        93,
        94,
        5,
        51,
        0,
        0,
        94,
        95,
        5,
        11,
        0,
        0,
        95,
        96,
        5,
        12,
        0,
        0,
        96,
        98,
        5,
        9,
        0,
        0,
        97,
        99,
        3,
        16,
        8,
        0,
        98,
        97,
        1,
        0,
        0,
        0,
        98,
        99,
        1,
        0,
        0,
        0,
        99,
        100,
        1,
        0,
        0,
        0,
        100,
        101,
        5,
        10,
        0,
        0,
        101,
        9,
        1,
        0,
        0,
        0,
        102,
        103,
        5,
        52,
        0,
        0,
        103,
        104,
        5,
        11,
        0,
        0,
        104,
        105,
        5,
        13,
        0,
        0,
        105,
        108,
        3,
        2,
        1,
        0,
        106,
        109,
        3,
        52,
        26,
        0,
        107,
        109,
        3,
        54,
        27,
        0,
        108,
        106,
        1,
        0,
        0,
        0,
        108,
        107,
        1,
        0,
        0,
        0,
        109,
        11,
        1,
        0,
        0,
        0,
        110,
        111,
        5,
        52,
        0,
        0,
        111,
        112,
        5,
        11,
        0,
        0,
        112,
        113,
        5,
        13,
        0,
        0,
        113,
        114,
        5,
        14,
        0,
        0,
        114,
        115,
        5,
        48,
        0,
        0,
        115,
        116,
        5,
        15,
        0,
        0,
        116,
        117,
        5,
        16,
        0,
        0,
        117,
        118,
        5,
        17,
        0,
        0,
        118,
        119,
        5,
        18,
        0,
        0,
        119,
        120,
        5,
        53,
        0,
        0,
        120,
        13,
        1,
        0,
        0,
        0,
        121,
        126,
        3,
        18,
        9,
        0,
        122,
        123,
        5,
        19,
        0,
        0,
        123,
        125,
        3,
        18,
        9,
        0,
        124,
        122,
        1,
        0,
        0,
        0,
        125,
        128,
        1,
        0,
        0,
        0,
        126,
        124,
        1,
        0,
        0,
        0,
        126,
        127,
        1,
        0,
        0,
        0,
        127,
        15,
        1,
        0,
        0,
        0,
        128,
        126,
        1,
        0,
        0,
        0,
        129,
        134,
        3,
        2,
        1,
        0,
        130,
        131,
        5,
        19,
        0,
        0,
        131,
        133,
        3,
        2,
        1,
        0,
        132,
        130,
        1,
        0,
        0,
        0,
        133,
        136,
        1,
        0,
        0,
        0,
        134,
        132,
        1,
        0,
        0,
        0,
        134,
        135,
        1,
        0,
        0,
        0,
        135,
        17,
        1,
        0,
        0,
        0,
        136,
        134,
        1,
        0,
        0,
        0,
        137,
        138,
        3,
        2,
        1,
        0,
        138,
        139,
        5,
        51,
        0,
        0,
        139,
        147,
        1,
        0,
        0,
        0,
        140,
        141,
        3,
        2,
        1,
        0,
        141,
        142,
        5,
        52,
        0,
        0,
        142,
        147,
        1,
        0,
        0,
        0,
        143,
        144,
        3,
        2,
        1,
        0,
        144,
        145,
        3,
        52,
        26,
        0,
        145,
        147,
        1,
        0,
        0,
        0,
        146,
        137,
        1,
        0,
        0,
        0,
        146,
        140,
        1,
        0,
        0,
        0,
        146,
        143,
        1,
        0,
        0,
        0,
        147,
        19,
        1,
        0,
        0,
        0,
        148,
        149,
        5,
        49,
        0,
        0,
        149,
        151,
        5,
        20,
        0,
        0,
        150,
        152,
        3,
        22,
        11,
        0,
        151,
        150,
        1,
        0,
        0,
        0,
        152,
        153,
        1,
        0,
        0,
        0,
        153,
        151,
        1,
        0,
        0,
        0,
        153,
        154,
        1,
        0,
        0,
        0,
        154,
        21,
        1,
        0,
        0,
        0,
        155,
        165,
        3,
        24,
        12,
        0,
        156,
        165,
        3,
        26,
        13,
        0,
        157,
        165,
        3,
        28,
        14,
        0,
        158,
        165,
        3,
        32,
        16,
        0,
        159,
        165,
        3,
        34,
        17,
        0,
        160,
        165,
        3,
        38,
        19,
        0,
        161,
        165,
        3,
        40,
        20,
        0,
        162,
        165,
        3,
        44,
        22,
        0,
        163,
        165,
        3,
        48,
        24,
        0,
        164,
        155,
        1,
        0,
        0,
        0,
        164,
        156,
        1,
        0,
        0,
        0,
        164,
        157,
        1,
        0,
        0,
        0,
        164,
        158,
        1,
        0,
        0,
        0,
        164,
        159,
        1,
        0,
        0,
        0,
        164,
        160,
        1,
        0,
        0,
        0,
        164,
        161,
        1,
        0,
        0,
        0,
        164,
        162,
        1,
        0,
        0,
        0,
        164,
        163,
        1,
        0,
        0,
        0,
        165,
        23,
        1,
        0,
        0,
        0,
        166,
        167,
        5,
        21,
        0,
        0,
        167,
        169,
        3,
        2,
        1,
        0,
        168,
        170,
        3,
        50,
        25,
        0,
        169,
        168,
        1,
        0,
        0,
        0,
        169,
        170,
        1,
        0,
        0,
        0,
        170,
        25,
        1,
        0,
        0,
        0,
        171,
        172,
        5,
        22,
        0,
        0,
        172,
        173,
        5,
        3,
        0,
        0,
        173,
        174,
        5,
        52,
        0,
        0,
        174,
        176,
        5,
        6,
        0,
        0,
        175,
        177,
        3,
        14,
        7,
        0,
        176,
        175,
        1,
        0,
        0,
        0,
        176,
        177,
        1,
        0,
        0,
        0,
        177,
        178,
        1,
        0,
        0,
        0,
        178,
        191,
        5,
        7,
        0,
        0,
        179,
        180,
        5,
        51,
        0,
        0,
        180,
        181,
        5,
        11,
        0,
        0,
        181,
        182,
        5,
        22,
        0,
        0,
        182,
        183,
        3,
        2,
        1,
        0,
        183,
        184,
        5,
        52,
        0,
        0,
        184,
        186,
        5,
        6,
        0,
        0,
        185,
        187,
        3,
        14,
        7,
        0,
        186,
        185,
        1,
        0,
        0,
        0,
        186,
        187,
        1,
        0,
        0,
        0,
        187,
        188,
        1,
        0,
        0,
        0,
        188,
        189,
        5,
        7,
        0,
        0,
        189,
        191,
        1,
        0,
        0,
        0,
        190,
        171,
        1,
        0,
        0,
        0,
        190,
        179,
        1,
        0,
        0,
        0,
        191,
        27,
        1,
        0,
        0,
        0,
        192,
        193,
        5,
        51,
        0,
        0,
        193,
        194,
        5,
        11,
        0,
        0,
        194,
        195,
        3,
        30,
        15,
        0,
        195,
        196,
        3,
        2,
        1,
        0,
        196,
        197,
        3,
        50,
        25,
        0,
        197,
        198,
        5,
        19,
        0,
        0,
        198,
        199,
        3,
        50,
        25,
        0,
        199,
        29,
        1,
        0,
        0,
        0,
        200,
        201,
        7,
        1,
        0,
        0,
        201,
        31,
        1,
        0,
        0,
        0,
        202,
        203,
        5,
        33,
        0,
        0,
        203,
        204,
        5,
        34,
        0,
        0,
        204,
        205,
        5,
        35,
        0,
        0,
        205,
        219,
        5,
        49,
        0,
        0,
        206,
        207,
        5,
        33,
        0,
        0,
        207,
        208,
        5,
        4,
        0,
        0,
        208,
        209,
        3,
        50,
        25,
        0,
        209,
        210,
        5,
        19,
        0,
        0,
        210,
        211,
        5,
        34,
        0,
        0,
        211,
        212,
        5,
        35,
        0,
        0,
        212,
        213,
        5,
        49,
        0,
        0,
        213,
        214,
        5,
        19,
        0,
        0,
        214,
        215,
        5,
        34,
        0,
        0,
        215,
        216,
        5,
        35,
        0,
        0,
        216,
        217,
        5,
        49,
        0,
        0,
        217,
        219,
        1,
        0,
        0,
        0,
        218,
        202,
        1,
        0,
        0,
        0,
        218,
        206,
        1,
        0,
        0,
        0,
        219,
        33,
        1,
        0,
        0,
        0,
        220,
        221,
        5,
        51,
        0,
        0,
        221,
        222,
        5,
        11,
        0,
        0,
        222,
        223,
        5,
        36,
        0,
        0,
        223,
        224,
        3,
        2,
        1,
        0,
        224,
        225,
        5,
        19,
        0,
        0,
        225,
        226,
        5,
        2,
        0,
        0,
        226,
        227,
        3,
        36,
        18,
        0,
        227,
        35,
        1,
        0,
        0,
        0,
        228,
        229,
        7,
        2,
        0,
        0,
        229,
        37,
        1,
        0,
        0,
        0,
        230,
        231,
        5,
        37,
        0,
        0,
        231,
        232,
        3,
        2,
        1,
        0,
        232,
        233,
        3,
        50,
        25,
        0,
        233,
        234,
        5,
        19,
        0,
        0,
        234,
        235,
        5,
        2,
        0,
        0,
        235,
        236,
        3,
        36,
        18,
        0,
        236,
        39,
        1,
        0,
        0,
        0,
        237,
        238,
        5,
        51,
        0,
        0,
        238,
        239,
        5,
        11,
        0,
        0,
        239,
        240,
        5,
        38,
        0,
        0,
        240,
        241,
        3,
        42,
        21,
        0,
        241,
        242,
        5,
        19,
        0,
        0,
        242,
        243,
        5,
        2,
        0,
        0,
        243,
        244,
        3,
        36,
        18,
        0,
        244,
        245,
        5,
        19,
        0,
        0,
        245,
        246,
        5,
        1,
        0,
        0,
        246,
        247,
        3,
        50,
        25,
        0,
        247,
        263,
        1,
        0,
        0,
        0,
        248,
        249,
        5,
        51,
        0,
        0,
        249,
        250,
        5,
        11,
        0,
        0,
        250,
        251,
        5,
        38,
        0,
        0,
        251,
        252,
        3,
        42,
        21,
        0,
        252,
        253,
        5,
        19,
        0,
        0,
        253,
        254,
        5,
        2,
        0,
        0,
        254,
        255,
        3,
        36,
        18,
        0,
        255,
        256,
        5,
        19,
        0,
        0,
        256,
        257,
        5,
        1,
        0,
        0,
        257,
        258,
        5,
        48,
        0,
        0,
        258,
        259,
        5,
        19,
        0,
        0,
        259,
        260,
        5,
        1,
        0,
        0,
        260,
        261,
        3,
        50,
        25,
        0,
        261,
        263,
        1,
        0,
        0,
        0,
        262,
        237,
        1,
        0,
        0,
        0,
        262,
        248,
        1,
        0,
        0,
        0,
        263,
        41,
        1,
        0,
        0,
        0,
        264,
        267,
        3,
        2,
        1,
        0,
        265,
        267,
        5,
        51,
        0,
        0,
        266,
        264,
        1,
        0,
        0,
        0,
        266,
        265,
        1,
        0,
        0,
        0,
        267,
        43,
        1,
        0,
        0,
        0,
        268,
        269,
        5,
        51,
        0,
        0,
        269,
        270,
        5,
        11,
        0,
        0,
        270,
        271,
        5,
        39,
        0,
        0,
        271,
        272,
        3,
        46,
        23,
        0,
        272,
        273,
        3,
        2,
        1,
        0,
        273,
        274,
        3,
        50,
        25,
        0,
        274,
        275,
        5,
        19,
        0,
        0,
        275,
        276,
        3,
        50,
        25,
        0,
        276,
        45,
        1,
        0,
        0,
        0,
        277,
        278,
        7,
        3,
        0,
        0,
        278,
        47,
        1,
        0,
        0,
        0,
        279,
        280,
        5,
        51,
        0,
        0,
        280,
        281,
        5,
        11,
        0,
        0,
        281,
        282,
        5,
        46,
        0,
        0,
        282,
        283,
        3,
        2,
        1,
        0,
        283,
        284,
        5,
        14,
        0,
        0,
        284,
        285,
        3,
        50,
        25,
        0,
        285,
        286,
        5,
        19,
        0,
        0,
        286,
        287,
        5,
        35,
        0,
        0,
        287,
        288,
        5,
        49,
        0,
        0,
        288,
        297,
        5,
        17,
        0,
        0,
        289,
        290,
        5,
        19,
        0,
        0,
        290,
        291,
        5,
        14,
        0,
        0,
        291,
        292,
        3,
        50,
        25,
        0,
        292,
        293,
        5,
        19,
        0,
        0,
        293,
        294,
        5,
        35,
        0,
        0,
        294,
        295,
        5,
        49,
        0,
        0,
        295,
        296,
        5,
        17,
        0,
        0,
        296,
        298,
        1,
        0,
        0,
        0,
        297,
        289,
        1,
        0,
        0,
        0,
        298,
        299,
        1,
        0,
        0,
        0,
        299,
        297,
        1,
        0,
        0,
        0,
        299,
        300,
        1,
        0,
        0,
        0,
        300,
        49,
        1,
        0,
        0,
        0,
        301,
        305,
        5,
        51,
        0,
        0,
        302,
        305,
        3,
        52,
        26,
        0,
        303,
        305,
        5,
        52,
        0,
        0,
        304,
        301,
        1,
        0,
        0,
        0,
        304,
        302,
        1,
        0,
        0,
        0,
        304,
        303,
        1,
        0,
        0,
        0,
        305,
        51,
        1,
        0,
        0,
        0,
        306,
        307,
        7,
        4,
        0,
        0,
        307,
        53,
        1,
        0,
        0,
        0,
        308,
        309,
        5,
        52,
        0,
        0,
        309,
        55,
        1,
        0,
        0,
        0,
        21,
        61,
        63,
        73,
        82,
        89,
        98,
        108,
        126,
        134,
        146,
        153,
        164,
        169,
        176,
        186,
        190,
        218,
        262,
        266,
        299,
        304,
    ]


class llvmParser(Parser):

    grammarFileName = "llvm.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'i32'",
        "'ptr'",
        "'void'",
        "'i1'",
        "'declare'",
        "'('",
        "')'",
        "'define'",
        "'{'",
        "'}'",
        "'='",
        "'type'",
        "'global'",
        "'['",
        "'x'",
        "'i8'",
        "']'",
        "'c'",
        "','",
        "':'",
        "'ret'",
        "'call'",
        "'add'",
        "'sub'",
        "'mul'",
        "'sdiv'",
        "'srem'",
        "'shl'",
        "'ashr'",
        "'and'",
        "'or'",
        "'xor'",
        "'br'",
        "'label'",
        "'%'",
        "'load'",
        "'store'",
        "'getelementptr'",
        "'icmp'",
        "'eq'",
        "'ne'",
        "'slt'",
        "'sgt'",
        "'sle'",
        "'sge'",
        "'phi'",
        "'null'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "INTEGER",
        "Label",
        "Identifier",
        "Privatevariable",
        "Global_var",
        "StringLiteral",
        "WS",
    ]

    RULE_module = 0
    RULE_type = 1
    RULE_function_declare = 2
    RULE_function = 3
    RULE_typedelcare = 4
    RULE_globalvariable = 5
    RULE_string_declare = 6
    RULE_params = 7
    RULE_types = 8
    RULE_parameter = 9
    RULE_basic_block = 10
    RULE_instruction = 11
    RULE_ret = 12
    RULE_call = 13
    RULE_binary_op = 14
    RULE_bin_op = 15
    RULE_branch = 16
    RULE_load = 17
    RULE_var = 18
    RULE_store = 19
    RULE_getelementptr = 20
    RULE_ptrtype = 21
    RULE_compare = 22
    RULE_cond = 23
    RULE_phi = 24
    RULE_value = 25
    RULE_constant = 26
    RULE_string_constant = 27

    ruleNames = [
        "module",
        "type",
        "function_declare",
        "function",
        "typedelcare",
        "globalvariable",
        "string_declare",
        "params",
        "types",
        "parameter",
        "basic_block",
        "instruction",
        "ret",
        "call",
        "binary_op",
        "bin_op",
        "branch",
        "load",
        "var",
        "store",
        "getelementptr",
        "ptrtype",
        "compare",
        "cond",
        "phi",
        "value",
        "constant",
        "string_constant",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    INTEGER = 48
    Label = 49
    Identifier = 50
    Privatevariable = 51
    Global_var = 52
    StringLiteral = 53
    WS = 54

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class ModuleContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.FunctionContext)
            else:
                return self.getTypedRuleContext(llvmParser.FunctionContext, i)

        def function_declare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.Function_declareContext)
            else:
                return self.getTypedRuleContext(llvmParser.Function_declareContext, i)

        def globalvariable(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.GlobalvariableContext)
            else:
                return self.getTypedRuleContext(llvmParser.GlobalvariableContext, i)

        def string_declare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.String_declareContext)
            else:
                return self.getTypedRuleContext(llvmParser.String_declareContext, i)

        def typedelcare(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.TypedelcareContext)
            else:
                return self.getTypedRuleContext(llvmParser.TypedelcareContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_module

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModule"):
                listener.enterModule(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModule"):
                listener.exitModule(self)

    def module(self):

        localctx = llvmParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_module)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 63
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and ((1 << _la) & 6755399441056032) != 0:
                self.state = 61
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 56
                    self.function()
                    pass

                elif la_ == 2:
                    self.state = 57
                    self.function_declare()
                    pass

                elif la_ == 3:
                    self.state = 58
                    self.globalvariable()
                    pass

                elif la_ == 4:
                    self.state = 59
                    self.string_declare()
                    pass

                elif la_ == 5:
                    self.state = 60
                    self.typedelcare()
                    pass

                self.state = 65
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return llvmParser.RULE_type

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterType"):
                listener.enterType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitType"):
                listener.exitType(self)

    def type_(self):

        localctx = llvmParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_type)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 66
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 30) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_declareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def types(self):
            return self.getTypedRuleContext(llvmParser.TypesContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_function_declare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction_declare"):
                listener.enterFunction_declare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction_declare"):
                listener.exitFunction_declare(self)

    def function_declare(self):

        localctx = llvmParser.Function_declareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_function_declare)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 68
            self.match(llvmParser.T__4)
            self.state = 69
            self.type_()
            self.state = 70
            self.match(llvmParser.Global_var)
            self.state = 71
            self.match(llvmParser.T__5)
            self.state = 73
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 30) != 0:
                self.state = 72
                self.types()

            self.state = 75
            self.match(llvmParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def params(self):
            return self.getTypedRuleContext(llvmParser.ParamsContext, 0)

        def basic_block(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.Basic_blockContext)
            else:
                return self.getTypedRuleContext(llvmParser.Basic_blockContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_function

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunction"):
                listener.enterFunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunction"):
                listener.exitFunction(self)

    def function(self):

        localctx = llvmParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_function)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 77
            self.match(llvmParser.T__7)
            self.state = 78
            self.type_()
            self.state = 79
            self.match(llvmParser.Global_var)
            self.state = 80
            self.match(llvmParser.T__5)
            self.state = 82
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 30) != 0:
                self.state = 81
                self.params()

            self.state = 84
            self.match(llvmParser.T__6)
            self.state = 85
            self.match(llvmParser.T__8)
            self.state = 87
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 86
                self.basic_block()
                self.state = 89
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 49):
                    break

            self.state = 91
            self.match(llvmParser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedelcareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def types(self):
            return self.getTypedRuleContext(llvmParser.TypesContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_typedelcare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypedelcare"):
                listener.enterTypedelcare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypedelcare"):
                listener.exitTypedelcare(self)

    def typedelcare(self):

        localctx = llvmParser.TypedelcareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typedelcare)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self.match(llvmParser.Privatevariable)
            self.state = 94
            self.match(llvmParser.T__10)
            self.state = 95
            self.match(llvmParser.T__11)
            self.state = 96
            self.match(llvmParser.T__8)
            self.state = 98
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and ((1 << _la) & 30) != 0:
                self.state = 97
                self.types()

            self.state = 100
            self.match(llvmParser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalvariableContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def constant(self):
            return self.getTypedRuleContext(llvmParser.ConstantContext, 0)

        def string_constant(self):
            return self.getTypedRuleContext(llvmParser.String_constantContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_globalvariable

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobalvariable"):
                listener.enterGlobalvariable(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobalvariable"):
                listener.exitGlobalvariable(self)

    def globalvariable(self):

        localctx = llvmParser.GlobalvariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_globalvariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 102
            self.match(llvmParser.Global_var)
            self.state = 103
            self.match(llvmParser.T__10)
            self.state = 104
            self.match(llvmParser.T__12)
            self.state = 105
            self.type_()
            self.state = 108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47, 48]:
                self.state = 106
                self.constant()
                pass
            elif token in [52]:
                self.state = 107
                self.string_constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_declareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def INTEGER(self):
            return self.getToken(llvmParser.INTEGER, 0)

        def StringLiteral(self):
            return self.getToken(llvmParser.StringLiteral, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_string_declare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_declare"):
                listener.enterString_declare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_declare"):
                listener.exitString_declare(self)

    def string_declare(self):

        localctx = llvmParser.String_declareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_string_declare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 110
            self.match(llvmParser.Global_var)
            self.state = 111
            self.match(llvmParser.T__10)
            self.state = 112
            self.match(llvmParser.T__12)
            self.state = 113
            self.match(llvmParser.T__13)
            self.state = 114
            self.match(llvmParser.INTEGER)
            self.state = 115
            self.match(llvmParser.T__14)
            self.state = 116
            self.match(llvmParser.T__15)
            self.state = 117
            self.match(llvmParser.T__16)
            self.state = 118
            self.match(llvmParser.T__17)
            self.state = 119
            self.match(llvmParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.ParameterContext)
            else:
                return self.getTypedRuleContext(llvmParser.ParameterContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_params

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParams"):
                listener.enterParams(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParams"):
                listener.exitParams(self)

    def params(self):

        localctx = llvmParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_params)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self.parameter()
            self.state = 126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 19:
                self.state = 122
                self.match(llvmParser.T__18)
                self.state = 123
                self.parameter()
                self.state = 128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypesContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.TypeContext)
            else:
                return self.getTypedRuleContext(llvmParser.TypeContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_types

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypes"):
                listener.enterTypes(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypes"):
                listener.exitTypes(self)

    def types(self):

        localctx = llvmParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_types)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 129
            self.type_()
            self.state = 134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 19:
                self.state = 130
                self.match(llvmParser.T__18)
                self.state = 131
                self.type_()
                self.state = 136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def constant(self):
            return self.getTypedRuleContext(llvmParser.ConstantContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_parameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameter"):
                listener.enterParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameter"):
                listener.exitParameter(self)

    def parameter(self):

        localctx = llvmParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_parameter)
        try:
            self.state = 146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 9, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.type_()
                self.state = 138
                self.match(llvmParser.Privatevariable)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 140
                self.type_()
                self.state = 141
                self.match(llvmParser.Global_var)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 143
                self.type_()
                self.state = 144
                self.constant()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Basic_blockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(llvmParser.Label, 0)

        def instruction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.InstructionContext)
            else:
                return self.getTypedRuleContext(llvmParser.InstructionContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_basic_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBasic_block"):
                listener.enterBasic_block(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBasic_block"):
                listener.exitBasic_block(self)

    def basic_block(self):

        localctx = llvmParser.Basic_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_basic_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self.match(llvmParser.Label)
            self.state = 149
            self.match(llvmParser.T__19)
            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 150
                self.instruction()
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (
                    (((_la) & ~0x3F) == 0 and ((1 << _la) & 2251945848864768) != 0)
                ):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstructionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ret(self):
            return self.getTypedRuleContext(llvmParser.RetContext, 0)

        def call(self):
            return self.getTypedRuleContext(llvmParser.CallContext, 0)

        def binary_op(self):
            return self.getTypedRuleContext(llvmParser.Binary_opContext, 0)

        def branch(self):
            return self.getTypedRuleContext(llvmParser.BranchContext, 0)

        def load(self):
            return self.getTypedRuleContext(llvmParser.LoadContext, 0)

        def store(self):
            return self.getTypedRuleContext(llvmParser.StoreContext, 0)

        def getelementptr(self):
            return self.getTypedRuleContext(llvmParser.GetelementptrContext, 0)

        def compare(self):
            return self.getTypedRuleContext(llvmParser.CompareContext, 0)

        def phi(self):
            return self.getTypedRuleContext(llvmParser.PhiContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_instruction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInstruction"):
                listener.enterInstruction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInstruction"):
                listener.exitInstruction(self)

    def instruction(self):

        localctx = llvmParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_instruction)
        try:
            self.state = 164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 155
                self.ret()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 156
                self.call()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 157
                self.binary_op()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 158
                self.branch()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 159
                self.load()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 160
                self.store()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 161
                self.getelementptr()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 162
                self.compare()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 163
                self.phi()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def value(self):
            return self.getTypedRuleContext(llvmParser.ValueContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_ret

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRet"):
                listener.enterRet(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRet"):
                listener.exitRet(self)

    def ret(self):

        localctx = llvmParser.RetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_ret)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(llvmParser.T__20)
            self.state = 167
            self.type_()
            self.state = 169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 168
                self.value()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def params(self):
            return self.getTypedRuleContext(llvmParser.ParamsContext, 0)

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_call

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCall"):
                listener.enterCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCall"):
                listener.exitCall(self)

    def call(self):

        localctx = llvmParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_call)
        self._la = 0  # Token type
        try:
            self.state = 190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 171
                self.match(llvmParser.T__21)
                self.state = 172
                self.match(llvmParser.T__2)
                self.state = 173
                self.match(llvmParser.Global_var)
                self.state = 174
                self.match(llvmParser.T__5)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and ((1 << _la) & 30) != 0:
                    self.state = 175
                    self.params()

                self.state = 178
                self.match(llvmParser.T__6)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self.match(llvmParser.Privatevariable)
                self.state = 180
                self.match(llvmParser.T__10)
                self.state = 181
                self.match(llvmParser.T__21)
                self.state = 182
                self.type_()
                self.state = 183
                self.match(llvmParser.Global_var)
                self.state = 184
                self.match(llvmParser.T__5)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and ((1 << _la) & 30) != 0:
                    self.state = 185
                    self.params()

                self.state = 188
                self.match(llvmParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Binary_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def bin_op(self):
            return self.getTypedRuleContext(llvmParser.Bin_opContext, 0)

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def value(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.ValueContext)
            else:
                return self.getTypedRuleContext(llvmParser.ValueContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_binary_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinary_op"):
                listener.enterBinary_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinary_op"):
                listener.exitBinary_op(self)

    def binary_op(self):

        localctx = llvmParser.Binary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_binary_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.match(llvmParser.Privatevariable)
            self.state = 193
            self.match(llvmParser.T__10)
            self.state = 194
            self.bin_op()
            self.state = 195
            self.type_()
            self.state = 196
            self.value()
            self.state = 197
            self.match(llvmParser.T__18)
            self.state = 198
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bin_opContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return llvmParser.RULE_bin_op

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBin_op"):
                listener.enterBin_op(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBin_op"):
                listener.exitBin_op(self)

    def bin_op(self):

        localctx = llvmParser.Bin_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_bin_op)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 8581545984) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BranchContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self, i: int = None):
            if i is None:
                return self.getTokens(llvmParser.Label)
            else:
                return self.getToken(llvmParser.Label, i)

        def value(self):
            return self.getTypedRuleContext(llvmParser.ValueContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_branch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBranch"):
                listener.enterBranch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBranch"):
                listener.exitBranch(self)

    def branch(self):

        localctx = llvmParser.BranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_branch)
        try:
            self.state = 218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 16, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(llvmParser.T__32)
                self.state = 203
                self.match(llvmParser.T__33)
                self.state = 204
                self.match(llvmParser.T__34)
                self.state = 205
                self.match(llvmParser.Label)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(llvmParser.T__32)
                self.state = 207
                self.match(llvmParser.T__3)
                self.state = 208
                self.value()
                self.state = 209
                self.match(llvmParser.T__18)
                self.state = 210
                self.match(llvmParser.T__33)
                self.state = 211
                self.match(llvmParser.T__34)
                self.state = 212
                self.match(llvmParser.Label)
                self.state = 213
                self.match(llvmParser.T__18)
                self.state = 214
                self.match(llvmParser.T__33)
                self.state = 215
                self.match(llvmParser.T__34)
                self.state = 216
                self.match(llvmParser.Label)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def var(self):
            return self.getTypedRuleContext(llvmParser.VarContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_load

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLoad"):
                listener.enterLoad(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLoad"):
                listener.exitLoad(self)

    def load(self):

        localctx = llvmParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_load)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.match(llvmParser.Privatevariable)
            self.state = 221
            self.match(llvmParser.T__10)
            self.state = 222
            self.match(llvmParser.T__35)
            self.state = 223
            self.type_()
            self.state = 224
            self.match(llvmParser.T__18)
            self.state = 225
            self.match(llvmParser.T__1)
            self.state = 226
            self.var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_var

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVar"):
                listener.enterVar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVar"):
                listener.exitVar(self)

    def var(self):

        localctx = llvmParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_var)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            _la = self._input.LA(1)
            if not (_la == 51 or _la == 52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StoreContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def value(self):
            return self.getTypedRuleContext(llvmParser.ValueContext, 0)

        def var(self):
            return self.getTypedRuleContext(llvmParser.VarContext, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_store

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStore"):
                listener.enterStore(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStore"):
                listener.exitStore(self)

    def store(self):

        localctx = llvmParser.StoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_store)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(llvmParser.T__36)
            self.state = 231
            self.type_()
            self.state = 232
            self.value()
            self.state = 233
            self.match(llvmParser.T__18)
            self.state = 234
            self.match(llvmParser.T__1)
            self.state = 235
            self.var()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetelementptrContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def ptrtype(self):
            return self.getTypedRuleContext(llvmParser.PtrtypeContext, 0)

        def var(self):
            return self.getTypedRuleContext(llvmParser.VarContext, 0)

        def value(self):
            return self.getTypedRuleContext(llvmParser.ValueContext, 0)

        def INTEGER(self):
            return self.getToken(llvmParser.INTEGER, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_getelementptr

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGetelementptr"):
                listener.enterGetelementptr(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGetelementptr"):
                listener.exitGetelementptr(self)

    def getelementptr(self):

        localctx = llvmParser.GetelementptrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_getelementptr)
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 237
                self.match(llvmParser.Privatevariable)
                self.state = 238
                self.match(llvmParser.T__10)
                self.state = 239
                self.match(llvmParser.T__37)
                self.state = 240
                self.ptrtype()
                self.state = 241
                self.match(llvmParser.T__18)
                self.state = 242
                self.match(llvmParser.T__1)
                self.state = 243
                self.var()
                self.state = 244
                self.match(llvmParser.T__18)
                self.state = 245
                self.match(llvmParser.T__0)
                self.state = 246
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.match(llvmParser.Privatevariable)
                self.state = 249
                self.match(llvmParser.T__10)
                self.state = 250
                self.match(llvmParser.T__37)
                self.state = 251
                self.ptrtype()
                self.state = 252
                self.match(llvmParser.T__18)
                self.state = 253
                self.match(llvmParser.T__1)
                self.state = 254
                self.var()
                self.state = 255
                self.match(llvmParser.T__18)
                self.state = 256
                self.match(llvmParser.T__0)
                self.state = 257
                self.match(llvmParser.INTEGER)
                self.state = 258
                self.match(llvmParser.T__18)
                self.state = 259
                self.match(llvmParser.T__0)
                self.state = 260
                self.value()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PtrtypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_ptrtype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPtrtype"):
                listener.enterPtrtype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPtrtype"):
                listener.exitPtrtype(self)

    def ptrtype(self):

        localctx = llvmParser.PtrtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_ptrtype)
        try:
            self.state = 266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.type_()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 265
                self.match(llvmParser.Privatevariable)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompareContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def cond(self):
            return self.getTypedRuleContext(llvmParser.CondContext, 0)

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def value(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.ValueContext)
            else:
                return self.getTypedRuleContext(llvmParser.ValueContext, i)

        def getRuleIndex(self):
            return llvmParser.RULE_compare

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompare"):
                listener.enterCompare(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompare"):
                listener.exitCompare(self)

    def compare(self):

        localctx = llvmParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_compare)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(llvmParser.Privatevariable)
            self.state = 269
            self.match(llvmParser.T__10)
            self.state = 270
            self.match(llvmParser.T__38)
            self.state = 271
            self.cond()
            self.state = 272
            self.type_()
            self.state = 273
            self.value()
            self.state = 274
            self.match(llvmParser.T__18)
            self.state = 275
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return llvmParser.RULE_cond

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCond"):
                listener.enterCond(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCond"):
                listener.exitCond(self)

    def cond(self):

        localctx = llvmParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_cond)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 69269232549888) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PhiContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def type_(self):
            return self.getTypedRuleContext(llvmParser.TypeContext, 0)

        def value(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(llvmParser.ValueContext)
            else:
                return self.getTypedRuleContext(llvmParser.ValueContext, i)

        def Label(self, i: int = None):
            if i is None:
                return self.getTokens(llvmParser.Label)
            else:
                return self.getToken(llvmParser.Label, i)

        def getRuleIndex(self):
            return llvmParser.RULE_phi

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPhi"):
                listener.enterPhi(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPhi"):
                listener.exitPhi(self)

    def phi(self):

        localctx = llvmParser.PhiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_phi)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(llvmParser.Privatevariable)
            self.state = 280
            self.match(llvmParser.T__10)
            self.state = 281
            self.match(llvmParser.T__45)
            self.state = 282
            self.type_()
            self.state = 283
            self.match(llvmParser.T__13)
            self.state = 284
            self.value()
            self.state = 285
            self.match(llvmParser.T__18)
            self.state = 286
            self.match(llvmParser.T__34)
            self.state = 287
            self.match(llvmParser.Label)
            self.state = 288
            self.match(llvmParser.T__16)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 289
                self.match(llvmParser.T__18)
                self.state = 290
                self.match(llvmParser.T__13)
                self.state = 291
                self.value()
                self.state = 292
                self.match(llvmParser.T__18)
                self.state = 293
                self.match(llvmParser.T__34)
                self.state = 294
                self.match(llvmParser.Label)
                self.state = 295
                self.match(llvmParser.T__16)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 19):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Privatevariable(self):
            return self.getToken(llvmParser.Privatevariable, 0)

        def constant(self):
            return self.getTypedRuleContext(llvmParser.ConstantContext, 0)

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValue"):
                listener.enterValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValue"):
                listener.exitValue(self)

    def value(self):

        localctx = llvmParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_value)
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.match(llvmParser.Privatevariable)
                pass
            elif token in [47, 48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.constant()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.match(llvmParser.Global_var)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(llvmParser.INTEGER, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_constant

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstant"):
                listener.enterConstant(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstant"):
                listener.exitConstant(self)

    def constant(self):

        localctx = llvmParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constant)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            _la = self._input.LA(1)
            if not (_la == 47 or _la == 48):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_constantContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global_var(self):
            return self.getToken(llvmParser.Global_var, 0)

        def getRuleIndex(self):
            return llvmParser.RULE_string_constant

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString_constant"):
                listener.enterString_constant(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString_constant"):
                listener.exitString_constant(self)

    def string_constant(self):

        localctx = llvmParser.String_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_string_constant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(llvmParser.Global_var)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
